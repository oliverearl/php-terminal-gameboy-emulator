
6 files with changes
====================

1) src/Canvas/TerminalCanvas.php:7

    ---------- begin diff ----------
@@ @@
 {
     /**
      * The blank brailler char
-     * @var String
      */
-    protected $brailleCharOffset;
+    protected string $brailleCharOffset;
+
     protected $canvas;
+
     /**
      * If is a color enabled canvas, set to true
      * @var Boolean
      */
     public $colorEnabled = false;
+
     protected $currentSecond = 0;
+
     protected $framesInSecond = 0;
+
     protected $fps = 0;
+
     protected $height = 0;
+
     protected $lastFrame;
+
     protected $lastFrameCanvasBuffer;
+
     /**
      * Braille Pixel Matrix
      *   ,___,
@@ @@
      *   |3 6|
      *   |7 8|
      *   `````
-     * @var Array
      */
-    protected $pixelMap;
+    protected array $pixelMap;
+
     protected $width = 0;

     public function __construct()
@@ @@
      *
      * @param object $canvasBuffer $data = Each pixel (true/false)
      */
-    public function draw($canvasBuffer)
+    public function draw($canvasBuffer): void
     {
         //Calculate current FPS
         if ($this->currentSecond != time()) {
@@ @@
             $content = "\e[H\e[2J";

             if ($this->height > 0 && $this->width > 0) {
-                $content = "\e[{$this->height}A\e[{$this->width}D";
+                $content = sprintf('[%sA[%sD', $this->height, $this->width);
             }

             $content .= sprintf('FPS: %3d - Frame Skip: %3d' . PHP_EOL, $this->fps, Settings::$frameskipAmout) . $frame;
    ----------- end diff -----------

Applied rules:
 * EncapsedStringsToSprintfRector
 * NewlineAfterStatementRector
 * AddVoidReturnTypeWhereNoReturnRector
 * TypedPropertyFromStrictConstructorRector


2) src/Cbopcode.php:6

    ---------- begin diff ----------
@@ @@
     /**
      * Run the given cbopcode.
      *
-     * @param Core $core
      * @param int $address
      * @return mixed
      */
@@ @@

     /**
      * Cbopcode #0x00.
-     *
-     * @param Core $core
      */
-    private static function cbopcode0(Core $core)
+    private function cbopcode0(Core $core): void
     {
         $core->FCarry = (($core->registerB & 0x80) == 0x80);
         $core->registerB = (($core->registerB << 1) & 0xFF) + (($core->FCarry) ? 1 : 0);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerB == 0);
     }

     /**
      * Cbopcode #0x01.
-     *
-     * @param Core $core
      */
-    private static function cbopcode1(Core $core)
+    private function cbopcode1(Core $core): void
     {
         $core->FCarry = (($core->registerC & 0x80) == 0x80);
         $core->registerC = (($core->registerC << 1) & 0xFF) + (($core->FCarry) ? 1 : 0);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerC == 0);
     }

     /**
      * Cbopcode #0x02.
-     *
-     * @param Core $core
      */
-    private static function cbopcode2(Core $core)
+    private function cbopcode2(Core $core): void
     {
         $core->FCarry = (($core->registerD & 0x80) == 0x80);
         $core->registerD = (($core->registerD << 1) & 0xFF) + (($core->FCarry) ? 1 : 0);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerD == 0);
     }

     /**
      * Cbopcode #0x03.
-     *
-     * @param Core $core
      */
-    private static function cbopcode3(Core $core)
+    private function cbopcode3(Core $core): void
     {
         $core->FCarry = (($core->registerE & 0x80) == 0x80);
         $core->registerE = (($core->registerE << 1) & 0xFF) + (($core->FCarry) ? 1 : 0);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerE == 0);
     }

     /**
      * Cbopcode #0x04.
-     *
-     * @param Core $core
      */
-    private static function cbopcode4(Core $core)
+    private function cbopcode4(Core $core): void
     {
         $core->FCarry = (($core->registersHL & 0x8000) == 0x8000);
         $core->registersHL = (($core->registersHL << 1) & 0xFE00) + (($core->FCarry) ? 0x100 : 0) + ($core->registersHL & 0xFF);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registersHL <= 0xFF);
     }

     /**
      * Cbopcode #0x05.
-     *
-     * @param Core $core
      */
-    private static function cbopcode5(Core $core)
+    private function cbopcode5(Core $core): void
     {
         $core->FCarry = (($core->registersHL & 0x80) == 0x80);
         $core->registersHL = ($core->registersHL & 0xFF00) + (($core->registersHL << 1) & 0xFF) + (($core->FCarry) ? 1 : 0);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = (($core->registersHL & 0xFF) == 0x00);
     }

     /**
      * Cbopcode #0x06.
-     *
-     * @param Core $core
      */
-    private static function cbopcode6(Core $core)
+    private function cbopcode6(Core $core): void
     {
         $temp_var = $core->memoryRead($core->registersHL);
         $core->FCarry = (($temp_var & 0x80) == 0x80);
         $temp_var = (($temp_var << 1) & 0xFF) + (($core->FCarry) ? 1 : 0);
         $core->memoryWrite($core->registersHL, $temp_var);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($temp_var == 0x00);
     }

     /**
      * Cbopcode #0x07.
-     *
-     * @param Core $core
      */
-    private static function cbopcode7(Core $core)
+    private function cbopcode7(Core $core): void
     {
         $core->FCarry = (($core->registerA & 0x80) == 0x80);
         $core->registerA = (($core->registerA << 1) & 0xFF) + (($core->FCarry) ? 1 : 0);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerA == 0x00);
     }

     /**
      * Cbopcode #0x08.
-     *
-     * @param Core $core
      */
-    private static function cbopcode8(Core $core)
+    private function cbopcode8(Core $core): void
     {
         $core->FCarry = (($core->registerB & 0x01) == 0x01);
         $core->registerB = (($core->FCarry) ? 0x80 : 0) + ($core->registerB >> 1);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerB == 0);
     }

     /**
      * Cbopcode #0x09.
-     *
-     * @param Core $core
      */
-    private static function cbopcode9(Core $core)
+    private function cbopcode9(Core $core): void
     {
         $core->FCarry = (($core->registerC & 0x01) == 0x01);
         $core->registerC = (($core->FCarry) ? 0x80 : 0) + ($core->registerC >> 1);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerC == 0);
     }

     /**
      * Cbopcode #0x0A.
-     *
-     * @param Core $core
      */
-    private static function cbopcode10(Core $core)
+    private function cbopcode10(Core $core): void
     {
         $core->FCarry = (($core->registerD & 0x01) == 0x01);
         $core->registerD = (($core->FCarry) ? 0x80 : 0) + ($core->registerD >> 1);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerD == 0);
     }

     /**
      * Cbopcode #0x0B.
-     *
-     * @param Core $core
      */
-    private static function cbopcode11(Core $core)
+    private function cbopcode11(Core $core): void
     {
         $core->FCarry = (($core->registerE & 0x01) == 0x01);
         $core->registerE = (($core->FCarry) ? 0x80 : 0) + ($core->registerE >> 1);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerE == 0);
     }

     /**
      * Cbopcode #0x0C.
-     *
-     * @param Core $core
      */
-    private static function cbopcode12(Core $core)
+    private function cbopcode12(Core $core): void
     {
         $core->FCarry = (($core->registersHL & 0x0100) == 0x0100);
         $core->registersHL = (($core->FCarry) ? 0x8000 : 0) + (($core->registersHL >> 1) & 0xFF00) + ($core->registersHL & 0xFF);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registersHL <= 0xFF);
     }

     /**
      * Cbopcode #0x0D.
-     *
-     * @param Core $core
      */
-    private static function cbopcode13(Core $core)
+    private function cbopcode13(Core $core): void
     {
         $core->FCarry = (($core->registersHL & 0x01) == 0x01);
         $core->registersHL = ($core->registersHL & 0xFF00) + (($core->FCarry) ? 0x80 : 0) + (($core->registersHL & 0xFF) >> 1);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = (($core->registersHL & 0xFF) == 0x00);
     }

     /**
      * Cbopcode #0x0E.
-     *
-     * @param Core $core
      */
-    private static function cbopcode14(Core $core)
+    private function cbopcode14(Core $core): void
     {
         $temp_var = $core->memoryRead($core->registersHL);
         $core->FCarry = (($temp_var & 0x01) == 0x01);
         $temp_var = (($core->FCarry) ? 0x80 : 0) + ($temp_var >> 1);
         $core->memoryWrite($core->registersHL, $temp_var);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($temp_var == 0x00);
     }

     /**
      * Cbopcode #0x0F.
-     *
-     * @param Core $core
      */
-    private static function cbopcode15(Core $core)
+    private function cbopcode15(Core $core): void
     {
         $core->FCarry = (($core->registerA & 0x01) == 0x01);
         $core->registerA = (($core->FCarry) ? 0x80 : 0) + ($core->registerA >> 1);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerA == 0x00);
     }

     /**
      * Cbopcode #0x10.
-     *
-     * @param Core $core
      */
-    private static function cbopcode16(Core $core)
+    private function cbopcode16(Core $core): void
     {
         $newFCarry = (($core->registerB & 0x80) == 0x80);
         $core->registerB = (($core->registerB << 1) & 0xFF) + (($core->FCarry) ? 1 : 0);
         $core->FCarry = $newFCarry;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerB == 0);
     }

     /**
      * Cbopcode #0x11.
-     *
-     * @param Core $core
      */
-    private static function cbopcode17(Core $core)
+    private function cbopcode17(Core $core): void
     {
         $newFCarry = (($core->registerC & 0x80) == 0x80);
         $core->registerC = (($core->registerC << 1) & 0xFF) + (($core->FCarry) ? 1 : 0);
         $core->FCarry = $newFCarry;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerC == 0);
     }

     /**
      * Cbopcode #0x12.
-     *
-     * @param Core $core
      */
-    private static function cbopcode18(Core $core)
+    private function cbopcode18(Core $core): void
     {
         $newFCarry = (($core->registerD & 0x80) == 0x80);
         $core->registerD = (($core->registerD << 1) & 0xFF) + (($core->FCarry) ? 1 : 0);
         $core->FCarry = $newFCarry;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerD == 0);
     }

     /**
      * Cbopcode #0x13.
-     *
-     * @param Core $core
      */
-    private static function cbopcode19(Core $core)
+    private function cbopcode19(Core $core): void
     {
         $newFCarry = (($core->registerE & 0x80) == 0x80);
         $core->registerE = (($core->registerE << 1) & 0xFF) + (($core->FCarry) ? 1 : 0);
         $core->FCarry = $newFCarry;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerE == 0);
     }

     /**
      * Cbopcode #0x14.
-     *
-     * @param Core $core
      */
-    private static function cbopcode20(Core $core)
+    private function cbopcode20(Core $core): void
     {
         $newFCarry = (($core->registersHL & 0x8000) == 0x8000);
         $core->registersHL = (($core->registersHL << 1) & 0xFE00) + (($core->FCarry) ? 0x100 : 0) + ($core->registersHL & 0xFF);
         $core->FCarry = $newFCarry;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registersHL <= 0xFF);
     }

     /**
      * Cbopcode #0x15.
-     *
-     * @param Core $core
      */
-    private static function cbopcode21(Core $core)
+    private function cbopcode21(Core $core): void
     {
         $newFCarry = (($core->registersHL & 0x80) == 0x80);
         $core->registersHL = ($core->registersHL & 0xFF00) + (($core->registersHL << 1) & 0xFF) + (($core->FCarry) ? 1 : 0);
         $core->FCarry = $newFCarry;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = (($core->registersHL & 0xFF) == 0x00);
     }

     /**
      * Cbopcode #0x16.
-     *
-     * @param Core $core
      */
-    private static function cbopcode22(Core $core)
+    private function cbopcode22(Core $core): void
     {
         $temp_var = $core->memoryRead($core->registersHL);
         $newFCarry = (($temp_var & 0x80) == 0x80);
@@ @@
         $temp_var = (($temp_var << 1) & 0xFF) + (($core->FCarry) ? 1 : 0);
         $core->FCarry = $newFCarry;
         $core->memoryWrite($core->registersHL, $temp_var);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($temp_var == 0x00);
     }

     /**
      * Cbopcode #0x17.
-     *
-     * @param Core $core
      */
-    private static function cbopcode23(Core $core)
+    private function cbopcode23(Core $core): void
     {
         $newFCarry = (($core->registerA & 0x80) == 0x80);
         $core->registerA = (($core->registerA << 1) & 0xFF) + (($core->FCarry) ? 1 : 0);
         $core->FCarry = $newFCarry;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerA == 0x00);
     }

     /**
      * Cbopcode #0x18.
-     *
-     * @param Core $core
      */
-    private static function cbopcode24(Core $core)
+    private function cbopcode24(Core $core): void
     {
         $newFCarry = (($core->registerB & 0x01) == 0x01);
         $core->registerB = (($core->FCarry) ? 0x80 : 0) + ($core->registerB >> 1);
         $core->FCarry = $newFCarry;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerB == 0);
     }

     /**
      * Cbopcode #0x19.
-     *
-     * @param Core $core
      */
-    private static function cbopcode25(Core $core)
+    private function cbopcode25(Core $core): void
     {
         $newFCarry = (($core->registerC & 0x01) == 0x01);
         $core->registerC = (($core->FCarry) ? 0x80 : 0) + ($core->registerC >> 1);
         $core->FCarry = $newFCarry;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerC == 0);
     }

     /**
      * Cbopcode #0x1A.
-     *
-     * @param Core $core
      */
-    private static function cbopcode26(Core $core)
+    private function cbopcode26(Core $core): void
     {
         $newFCarry = (($core->registerD & 0x01) == 0x01);
         $core->registerD = (($core->FCarry) ? 0x80 : 0) + ($core->registerD >> 1);
         $core->FCarry = $newFCarry;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerD == 0);
     }

     /**
      * Cbopcode #0x1B.
-     *
-     * @param Core $core
      */
-    private static function cbopcode27(Core $core)
+    private function cbopcode27(Core $core): void
     {
         $newFCarry = (($core->registerE & 0x01) == 0x01);
         $core->registerE = (($core->FCarry) ? 0x80 : 0) + ($core->registerE >> 1);
         $core->FCarry = $newFCarry;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerE == 0);
     }

     /**
      * Cbopcode #0x1C.
-     *
-     * @param Core $core
      */
-    private static function cbopcode28(Core $core)
+    private function cbopcode28(Core $core): void
     {
         $newFCarry = (($core->registersHL & 0x0100) == 0x0100);
         $core->registersHL = (($core->FCarry) ? 0x8000 : 0) + (($core->registersHL >> 1) & 0xFF00) + ($core->registersHL & 0xFF);
         $core->FCarry = $newFCarry;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registersHL <= 0xFF);
     }

     /**
      * Cbopcode #0x1D.
-     *
-     * @param Core $core
      */
-    private static function cbopcode29(Core $core)
+    private function cbopcode29(Core $core): void
     {
         $newFCarry = (($core->registersHL & 0x01) == 0x01);
         $core->registersHL = ($core->registersHL & 0xFF00) + (($core->FCarry) ? 0x80 : 0) + (($core->registersHL & 0xFF) >> 1);
         $core->FCarry = $newFCarry;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = (($core->registersHL & 0xFF) == 0x00);
     }

     /**
      * Cbopcode #0x1E.
-     *
-     * @param Core $core
      */
-    private static function cbopcode30(Core $core)
+    private function cbopcode30(Core $core): void
     {
         $temp_var = $core->memoryRead($core->registersHL);
         $newFCarry = (($temp_var & 0x01) == 0x01);
@@ @@
         $temp_var = (($core->FCarry) ? 0x80 : 0) + ($temp_var >> 1);
         $core->FCarry = $newFCarry;
         $core->memoryWrite($core->registersHL, $temp_var);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($temp_var == 0x00);
     }

     /**
      * Cbopcode #0x1F.
-     *
-     * @param Core $core
      */
-    private static function cbopcode31(Core $core)
+    private function cbopcode31(Core $core): void
     {
         $newFCarry = (($core->registerA & 0x01) == 0x01);
         $core->registerA = (($core->FCarry) ? 0x80 : 0) + ($core->registerA >> 1);
         $core->FCarry = $newFCarry;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerA == 0x00);
     }

     /**
      * Cbopcode #0x20.
-     *
-     * @param Core $core
      */
-    private static function cbopcode32(Core $core)
+    private function cbopcode32(Core $core): void
     {
         $core->FCarry = (($core->registerB & 0x80) == 0x80);
         $core->registerB = ($core->registerB << 1) & 0xFF;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerB == 0);
     }

     /**
      * Cbopcode #0x21.
-     *
-     * @param Core $core
      */
-    private static function cbopcode33(Core $core)
+    private function cbopcode33(Core $core): void
     {
         $core->FCarry = (($core->registerC & 0x80) == 0x80);
         $core->registerC = ($core->registerC << 1) & 0xFF;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerC == 0);
     }

     /**
      * Cbopcode #0x22.
-     *
-     * @param Core $core
      */
-    private static function cbopcode34(Core $core)
+    private function cbopcode34(Core $core): void
     {
         $core->FCarry = (($core->registerD & 0x80) == 0x80);
         $core->registerD = ($core->registerD << 1) & 0xFF;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerD == 0);
     }

     /**
      * Cbopcode #0x23.
-     *
-     * @param Core $core
      */
-    private static function cbopcode35(Core $core)
+    private function cbopcode35(Core $core): void
     {
         $core->FCarry = (($core->registerE & 0x80) == 0x80);
         $core->registerE = ($core->registerE << 1) & 0xFF;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerE == 0);
     }

     /**
      * Cbopcode #0x24.
-     *
-     * @param Core $core
      */
-    private static function cbopcode36(Core $core)
+    private function cbopcode36(Core $core): void
     {
         $core->FCarry = (($core->registersHL & 0x8000) == 0x8000);
         $core->registersHL = (($core->registersHL << 1) & 0xFE00) + ($core->registersHL & 0xFF);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registersHL <= 0xFF);
     }

     /**
      * Cbopcode #0x25.
-     *
-     * @param Core $core
      */
-    private static function cbopcode37(Core $core)
+    private function cbopcode37(Core $core): void
     {
         $core->FCarry = (($core->registersHL & 0x0080) == 0x0080);
         $core->registersHL = ($core->registersHL & 0xFF00) + (($core->registersHL << 1) & 0xFF);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = (($core->registersHL & 0xFF) == 0x00);
     }

     /**
      * Cbopcode #0x26.
-     *
-     * @param Core $core
      */
-    private static function cbopcode38(Core $core)
+    private function cbopcode38(Core $core): void
     {
         $temp_var = $core->memoryRead($core->registersHL);
         $core->FCarry = (($temp_var & 0x80) == 0x80);
         $temp_var = ($temp_var << 1) & 0xFF;
         $core->memoryWrite($core->registersHL, $temp_var);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($temp_var == 0x00);
     }

     /**
      * Cbopcode #0x27.
-     *
-     * @param Core $core
      */
-    private static function cbopcode39(Core $core)
+    private function cbopcode39(Core $core): void
     {
         $core->FCarry = (($core->registerA & 0x80) == 0x80);
         $core->registerA = ($core->registerA << 1) & 0xFF;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerA == 0x00);
     }

     /**
      * Cbopcode #0x28.
-     *
-     * @param Core $core
      */
-    private static function cbopcode40(Core $core)
+    private function cbopcode40(Core $core): void
     {
         $core->FCarry = (($core->registerB & 0x01) == 0x01);
         $core->registerB = ($core->registerB & 0x80) + ($core->registerB >> 1);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerB == 0);
     }

     /**
      * Cbopcode #0x29.
-     *
-     * @param Core $core
      */
-    private static function cbopcode41(Core $core)
+    private function cbopcode41(Core $core): void
     {
         $core->FCarry = (($core->registerC & 0x01) == 0x01);
         $core->registerC = ($core->registerC & 0x80) + ($core->registerC >> 1);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerC == 0);
     }

     /**
      * Cbopcode #0x2A.
-     *
-     * @param Core $core
      */
-    private static function cbopcode42(Core $core)
+    private function cbopcode42(Core $core): void
     {
         $core->FCarry = (($core->registerD & 0x01) == 0x01);
         $core->registerD = ($core->registerD & 0x80) + ($core->registerD >> 1);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerD == 0);
     }

     /**
      * Cbopcode #0x2B.
-     *
-     * @param Core $core
      */
-    private static function cbopcode43(Core $core)
+    private function cbopcode43(Core $core): void
     {
         $core->FCarry = (($core->registerE & 0x01) == 0x01);
         $core->registerE = ($core->registerE & 0x80) + ($core->registerE >> 1);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerE == 0);
     }

@@ @@
     /**
      *
      * Cbopcode #0x2C.
-     *
-     * @param Core $core
      */
-    private static function cbopcode44(Core $core)
+    private function cbopcode44(Core $core): void
     {
         $core->FCarry = (($core->registersHL & 0x0100) == 0x0100);
         $core->registersHL = (($core->registersHL >> 1) & 0xFF00) + ($core->registersHL & 0x80FF);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registersHL <= 0xFF);
     }

     /**
      * Cbopcode #0x2D.
-     *
-     * @param Core $core
      */
-    private static function cbopcode45(Core $core)
+    private function cbopcode45(Core $core): void
     {
         $core->FCarry = (($core->registersHL & 0x0001) == 0x0001);
         $core->registersHL = ($core->registersHL & 0xFF80) + (($core->registersHL & 0xFF) >> 1);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = (($core->registersHL & 0xFF) == 0x00);
     }

     /**
      * Cbopcode #0x2E.
-     *
-     * @param Core $core
      */
-    private static function cbopcode46(Core $core)
+    private function cbopcode46(Core $core): void
     {
         $temp_var = $core->memoryRead($core->registersHL);
         $core->FCarry = (($temp_var & 0x01) == 0x01);
         $temp_var = ($temp_var & 0x80) + ($temp_var >> 1);
         $core->memoryWrite($core->registersHL, $temp_var);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($temp_var == 0x00);
     }

     /**
      * Cbopcode #0x2F.
-     *
-     * @param Core $core
      */
-    private static function cbopcode47(Core $core)
+    private function cbopcode47(Core $core): void
     {
         $core->FCarry = (($core->registerA & 0x01) == 0x01);
         $core->registerA = ($core->registerA & 0x80) + ($core->registerA >> 1);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerA == 0x00);
     }

     /**
      * Cbopcode #0x30.
-     *
-     * @param Core $core
      */
-    private static function cbopcode48(Core $core)
+    private function cbopcode48(Core $core): void
     {
         $core->registerB = (($core->registerB & 0xF) << 4) + ($core->registerB >> 4);
         $core->FZero = ($core->registerB == 0);
-        $core->FCarry = $core->FHalfCarry = $core->FSubtract = false;
+        $core->FCarry = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
     }

     /**
      * Cbopcode #0x31.
-     *
-     * @param Core $core
      */
-    private static function cbopcode49(Core $core)
+    private function cbopcode49(Core $core): void
     {
         $core->registerC = (($core->registerC & 0xF) << 4) + ($core->registerC >> 4);
         $core->FZero = ($core->registerC == 0);
-        $core->FCarry = $core->FHalfCarry = $core->FSubtract = false;
+        $core->FCarry = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
     }

     /**
      * Cbopcode #0x32.
-     *
-     * @param Core $core
      */
-    private static function cbopcode50(Core $core)
+    private function cbopcode50(Core $core): void
     {
         $core->registerD = (($core->registerD & 0xF) << 4) + ($core->registerD >> 4);
         $core->FZero = ($core->registerD == 0);
-        $core->FCarry = $core->FHalfCarry = $core->FSubtract = false;
+        $core->FCarry = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
     }

     /**
      * Cbopcode #0x33.
-     *
-     * @param Core $core
      */
-    private static function cbopcode51(Core $core)
+    private function cbopcode51(Core $core): void
     {
         $core->registerE = (($core->registerE & 0xF) << 4) + ($core->registerE >> 4);
         $core->FZero = ($core->registerE == 0);
-        $core->FCarry = $core->FHalfCarry = $core->FSubtract = false;
+        $core->FCarry = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
     }

     /**
      * Cbopcode #0x34.
-     *
-     * @param Core $core
      */
-    private static function cbopcode52(Core $core)
+    private function cbopcode52(Core $core): void
     {
         $core->registersHL = (($core->registersHL & 0xF00) << 4) + (($core->registersHL & 0xF000) >> 4) + ($core->registersHL & 0xFF);
         $core->FZero = ($core->registersHL <= 0xFF);
-        $core->FCarry = $core->FHalfCarry = $core->FSubtract = false;
+        $core->FCarry = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
     }

     /**
      * Cbopcode #0x35.
-     *
-     * @param Core $core
      */
-    private static function cbopcode53(Core $core)
+    private function cbopcode53(Core $core): void
     {
         $core->registersHL = ($core->registersHL & 0xFF00) + (($core->registersHL & 0xF) << 4) + (($core->registersHL & 0xF0) >> 4);
         $core->FZero = (($core->registersHL & 0xFF) == 0);
-        $core->FCarry = $core->FHalfCarry = $core->FSubtract = false;
+        $core->FCarry = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
     }

     /**
      * Cbopcode #0x36.
-     *
-     * @param Core $core
      */
-    private static function cbopcode54(Core $core)
+    private function cbopcode54(Core $core): void
     {
         $temp_var = $core->memoryRead($core->registersHL);
         $temp_var = (($temp_var & 0xF) << 4) + ($temp_var >> 4);
+
         $core->memoryWrite($core->registersHL, $temp_var);
         $core->FZero = ($temp_var == 0);
-        $core->FCarry = $core->FHalfCarry = $core->FSubtract = false;
+        $core->FCarry = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
     }

     /**
      * Cbopcode #0x37.
-     *
-     * @param Core $core
      */
-    private static function cbopcode55(Core $core)
+    private function cbopcode55(Core $core): void
     {
         $core->registerA = (($core->registerA & 0xF) << 4) + ($core->registerA >> 4);
         $core->FZero = ($core->registerA == 0);
-        $core->FCarry = $core->FHalfCarry = $core->FSubtract = false;
+        $core->FCarry = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
     }

     /**
      * Cbopcode #0x38.
-     *
-     * @param Core $core
      */
-    private static function cbopcode56(Core $core)
+    private function cbopcode56(Core $core): void
     {
         $core->FCarry = (($core->registerB & 0x01) == 0x01);
         $core->registerB >>= 1;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerB == 0);
     }

     /**
      * Cbopcode #0x39.
-     *
-     * @param Core $core
      */
-    private static function cbopcode57(Core $core)
+    private function cbopcode57(Core $core): void
     {
         $core->FCarry = (($core->registerC & 0x01) == 0x01);
         $core->registerC >>= 1;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerC == 0);
     }

     /**
      * Cbopcode #0x3A.
-     *
-     * @param Core $core
      */
-    private static function cbopcode58(Core $core)
+    private function cbopcode58(Core $core): void
     {
         $core->FCarry = (($core->registerD & 0x01) == 0x01);
         $core->registerD >>= 1;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerD == 0);
     }

     /**
      * Cbopcode #0x3B.
-     *
-     * @param Core $core
      */
-    private static function cbopcode59(Core $core)
+    private function cbopcode59(Core $core): void
     {
         $core->FCarry = (($core->registerE & 0x01) == 0x01);
         $core->registerE >>= 1;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerE == 0);
     }

     /**
      * Cbopcode #0x3C.
-     *
-     * @param Core $core
      */
-    private static function cbopcode60(Core $core)
+    private function cbopcode60(Core $core): void
     {
         $core->FCarry = (($core->registersHL & 0x0100) == 0x0100);
         $core->registersHL = (($core->registersHL >> 1) & 0xFF00) + ($core->registersHL & 0xFF);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registersHL <= 0xFF);
     }

     /**
      * Cbopcode #0x3D.
-     *
-     * @param Core $core
      */
-    private static function cbopcode61(Core $core)
+    private function cbopcode61(Core $core): void
     {
         $core->FCarry = (($core->registersHL & 0x0001) == 0x0001);
         $core->registersHL = ($core->registersHL & 0xFF00) + (($core->registersHL & 0xFF) >> 1);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = (($core->registersHL & 0xFF) == 0x00);
     }

     /**
      * Cbopcode #0x3E.
-     *
-     * @param Core $core
      */
-    private static function cbopcode62(Core $core)
+    private function cbopcode62(Core $core): void
     {
         $temp_var = $core->memoryRead($core->registersHL);
         $core->FCarry = (($temp_var & 0x01) == 0x01);
         $core->memoryWrite($core->registersHL, $temp_var >>= 1);
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($temp_var == 0x00);
     }

     /**
      * Cbopcode #0x3F.
-     *
-     * @param Core $core
      */
-    private static function cbopcode63(Core $core)
+    private function cbopcode63(Core $core): void
     {
         $core->FCarry = (($core->registerA & 0x01) == 0x01);
         $core->registerA >>= 1;
-        $core->FHalfCarry = $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FSubtract = false;
         $core->FZero = ($core->registerA == 0x00);
     }

     /**
      * Cbopcode #0x40.
-     *
-     * @param Core $core
      */
-    private static function cbopcode64(Core $core)
+    private function cbopcode64(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x41.
-     *
-     * @param Core $core
      */
-    private static function cbopcode65(Core $core)
+    private function cbopcode65(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x42.
-     *
-     * @param Core $core
      */
-    private static function cbopcode66(Core $core)
+    private function cbopcode66(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x43.
-     *
-     * @param Core $core
      */
-    private static function cbopcode67(Core $core)
+    private function cbopcode67(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x44.
-     *
-     * @param Core $core
      */
-    private static function cbopcode68(Core $core)
+    private function cbopcode68(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x45.
-     *
-     * @param Core $core
      */
-    private static function cbopcode69(Core $core)
+    private function cbopcode69(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x46.
-     *
-     * @param Core $core
      */
-    private static function cbopcode70(Core $core)
+    private function cbopcode70(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x47.
-     *
-     * @param Core $core
      */
-    private static function cbopcode71(Core $core)
+    private function cbopcode71(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x48.
-     *
-     * @param Core $core
      */
-    private static function cbopcode72(Core $core)
+    private function cbopcode72(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x49.
-     *
-     * @param Core $core
      */
-    private static function cbopcode73(Core $core)
+    private function cbopcode73(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x4A.
-     *
-     * @param Core $core
      */
-    private static function cbopcode74(Core $core)
+    private function cbopcode74(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x4B.
-     *
-     * @param Core $core
      */
-    private static function cbopcode75(Core $core)
+    private function cbopcode75(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x4C.
-     *
-     * @param Core $core
      */
-    private static function cbopcode76(Core $core)
+    private function cbopcode76(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x4D.
-     *
-     * @param Core $core
      */
-    private static function cbopcode77(Core $core)
+    private function cbopcode77(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x4E.
-     *
-     * @param Core $core
      */
-    private static function cbopcode78(Core $core)
+    private function cbopcode78(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x4F.
-     *
-     * @param Core $core
      */
-    private static function cbopcode79(Core $core)
+    private function cbopcode79(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x50.
-     *
-     * @param Core $core
      */
-    private static function cbopcode80(Core $core)
+    private function cbopcode80(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x51.
-     *
-     * @param Core $core
      */
-    private static function cbopcode81(Core $core)
+    private function cbopcode81(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x52.
-     *
-     * @param Core $core
      */
-    private static function cbopcode82(Core $core)
+    private function cbopcode82(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x53.
-     *
-     * @param Core $core
      */
-    private static function cbopcode83(Core $core)
+    private function cbopcode83(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x54.
-     *
-     * @param Core $core
      */
-    private static function cbopcode84(Core $core)
+    private function cbopcode84(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x55.
-     *
-     * @param Core $core
      */
-    private static function cbopcode85(Core $core)
+    private function cbopcode85(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x56.
-     *
-     * @param Core $core
      */
-    private static function cbopcode86(Core $core)
+    private function cbopcode86(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x57.
-     *
-     * @param Core $core
      */
-    private static function cbopcode87(Core $core)
+    private function cbopcode87(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x58.
-     *
-     * @param Core $core
      */
-    private static function cbopcode88(Core $core)
+    private function cbopcode88(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x59.
-     *
-     * @param Core $core
      */
-    private static function cbopcode89(Core $core)
+    private function cbopcode89(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x5A.
-     *
-     * @param Core $core
      */
-    private static function cbopcode90(Core $core)
+    private function cbopcode90(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x5B.
-     *
-     * @param Core $core
      */
-    private static function cbopcode91(Core $core)
+    private function cbopcode91(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x5C.
-     *
-     * @param Core $core
      */
-    private static function cbopcode92(Core $core)
+    private function cbopcode92(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x5D.
-     *
-     * @param Core $core
      */
-    private static function cbopcode93(Core $core)
+    private function cbopcode93(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x5E.
-     *
-     * @param Core $core
      */
-    private static function cbopcode94(Core $core)
+    private function cbopcode94(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x5F.
-     *
-     * @param Core $core
      */
-    private static function cbopcode95(Core $core)
+    private function cbopcode95(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x60.
-     *
-     * @param Core $core
      */
-    private static function cbopcode96(Core $core)
+    private function cbopcode96(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x61.
-     *
-     * @param Core $core
      */
-    private static function cbopcode97(Core $core)
+    private function cbopcode97(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x62.
-     *
-     * @param Core $core
      */
-    private static function cbopcode98(Core $core)
+    private function cbopcode98(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x63.
-     *
-     * @param Core $core
      */
-    private static function cbopcode99(Core $core)
+    private function cbopcode99(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x64.
-     *
-     * @param Core $core
      */
-    private static function cbopcode100(Core $core)
+    private function cbopcode100(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x65.
-     *
-     * @param Core $core
      */
-    private static function cbopcode101(Core $core)
+    private function cbopcode101(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x66.
-     *
-     * @param Core $core
      */
-    private static function cbopcode102(Core $core)
+    private function cbopcode102(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x67.
-     *
-     * @param Core $core
      */
-    private static function cbopcode103(Core $core)
+    private function cbopcode103(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x68.
-     *
-     * @param Core $core
      */
-    private static function cbopcode104(Core $core)
+    private function cbopcode104(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x69.
-     *
-     * @param Core $core
      */
-    private static function cbopcode105(Core $core)
+    private function cbopcode105(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x6A.
-     *
-     * @param Core $core
      */
-    private static function cbopcode106(Core $core)
+    private function cbopcode106(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x6B.
-     *
-     * @param Core $core
      */
-    private static function cbopcode107(Core $core)
+    private function cbopcode107(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x6C.
-     *
-     * @param Core $core
      */
-    private static function cbopcode108(Core $core)
+    private function cbopcode108(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x6D.
-     *
-     * @param Core $core
      */
-    private static function cbopcode109(Core $core)
+    private function cbopcode109(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x6E.
-     *
-     * @param Core $core
      */
-    private static function cbopcode110(Core $core)
+    private function cbopcode110(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x6F.
-     *
-     * @param Core $core
      */
-    private static function cbopcode111(Core $core)
+    private function cbopcode111(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x70.
-     *
-     * @param Core $core
      */
-    private static function cbopcode112(Core $core)
+    private function cbopcode112(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x71.
-     *
-     * @param Core $core
      */
-    private static function cbopcode113(Core $core)
+    private function cbopcode113(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x72.
-     *
-     * @param Core $core
      */
-    private static function cbopcode114(Core $core)
+    private function cbopcode114(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x73.
-     *
-     * @param Core $core
      */
-    private static function cbopcode115(Core $core)
+    private function cbopcode115(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x74.
-     *
-     * @param Core $core
      */
-    private static function cbopcode116(Core $core)
+    private function cbopcode116(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x75.
-     *
-     * @param Core $core
      */
-    private static function cbopcode117(Core $core)
+    private function cbopcode117(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x76.
-     *
-     * @param Core $core
      */
-    private static function cbopcode118(Core $core)
+    private function cbopcode118(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x77.
-     *
-     * @param Core $core
      */
-    private static function cbopcode119(Core $core)
+    private function cbopcode119(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x78.
-     *
-     * @param Core $core
      */
-    private static function cbopcode120(Core $core)
+    private function cbopcode120(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x79.
-     *
-     * @param Core $core
      */
-    private static function cbopcode121(Core $core)
+    private function cbopcode121(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x7A.
-     *
-     * @param Core $core
      */
-    private static function cbopcode122(Core $core)
+    private function cbopcode122(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x7B.
-     *
-     * @param Core $core
      */
-    private static function cbopcode123(Core $core)
+    private function cbopcode123(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x7C.
-     *
-     * @param Core $core
      */
-    private static function cbopcode124(Core $core)
+    private function cbopcode124(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x7D.
-     *
-     * @param Core $core
      */
-    private static function cbopcode125(Core $core)
+    private function cbopcode125(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x7E.
-     *
-     * @param Core $core
      */
-    private static function cbopcode126(Core $core)
+    private function cbopcode126(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x7F.
-     *
-     * @param Core $core
      */
-    private static function cbopcode127(Core $core)
+    private function cbopcode127(Core $core): void
     {
         $core->FHalfCarry = true;
         $core->FSubtract = false;
@@ @@

     /**
      * Cbopcode #0x80.
-     *
-     * @param Core $core
      */
-    private static function cbopcode128(Core $core)
+    private function cbopcode128(Core $core): void
     {
         $core->registerB &= 0xFE;
     }
@@ @@

     /**
      * Cbopcode #0x81.
-     *
-     * @param Core $core
      */
-    private static function cbopcode129(Core $core)
+    private function cbopcode129(Core $core): void
     {
         $core->registerC &= 0xFE;
     }
@@ @@

     /**
      * Cbopcode #0x82.
-     *
-     * @param Core $core
      */
-    private static function cbopcode130(Core $core)
+    private function cbopcode130(Core $core): void
     {
         $core->registerD &= 0xFE;
     }
@@ @@

     /**
      * Cbopcode #0x83.
-     *
-     * @param Core $core
      */
-    private static function cbopcode131(Core $core)
+    private function cbopcode131(Core $core): void
     {
         $core->registerE &= 0xFE;
     }
@@ @@

     /**
      * Cbopcode #0x84.
-     *
-     * @param Core $core
      */
-    private static function cbopcode132(Core $core)
+    private function cbopcode132(Core $core): void
     {
         $core->registersHL &= 0xFEFF;
     }
@@ @@

     /**
      * Cbopcode #0x85.
-     *
-     * @param Core $core
      */
-    private static function cbopcode133(Core $core)
+    private function cbopcode133(Core $core): void
     {
         $core->registersHL &= 0xFFFE;
     }
@@ @@

     /**
      * Cbopcode #0x86.
-     *
-     * @param Core $core
      */
-    private static function cbopcode134(Core $core)
+    private function cbopcode134(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->memoryRead($core->registersHL) & 0xFE);
     }
@@ @@

     /**
      * Cbopcode #0x87.
-     *
-     * @param Core $core
      */
-    private static function cbopcode135(Core $core)
+    private function cbopcode135(Core $core): void
     {
         $core->registerA &= 0xFE;
     }
@@ @@

     /**
      * Cbopcode #0x88.
-     *
-     * @param Core $core
      */
-    private static function cbopcode136(Core $core)
+    private function cbopcode136(Core $core): void
     {
         $core->registerB &= 0xFD;
     }
@@ @@

     /**
      * Cbopcode #0x89.
-     *
-     * @param Core $core
      */
-    private static function cbopcode137(Core $core)
+    private function cbopcode137(Core $core): void
     {
         $core->registerC &= 0xFD;
     }
@@ @@

     /**
      * Cbopcode #0x8A.
-     *
-     * @param Core $core
      */
-    private static function cbopcode138(Core $core)
+    private function cbopcode138(Core $core): void
     {
         $core->registerD &= 0xFD;
     }
@@ @@

     /**
      * Cbopcode #0x8B.
-     *
-     * @param Core $core
      */
-    private static function cbopcode139(Core $core)
+    private function cbopcode139(Core $core): void
     {
         $core->registerE &= 0xFD;
     }
@@ @@

     /**
      * Cbopcode #0x8C.
-     *
-     * @param Core $core
      */
-    private static function cbopcode140(Core $core)
+    private function cbopcode140(Core $core): void
     {
         $core->registersHL &= 0xFDFF;
     }
@@ @@

     /**
      * Cbopcode #0x8D.
-     *
-     * @param Core $core
      */
-    private static function cbopcode141(Core $core)
+    private function cbopcode141(Core $core): void
     {
         $core->registersHL &= 0xFFFD;
     }
@@ @@

     /**
      * Cbopcode #0x8E.
-     *
-     * @param Core $core
      */
-    private static function cbopcode142(Core $core)
+    private function cbopcode142(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->memoryRead($core->registersHL) & 0xFD);
     }
@@ @@

     /**
      * Cbopcode #0x8F.
-     *
-     * @param Core $core
      */
-    private static function cbopcode143(Core $core)
+    private function cbopcode143(Core $core): void
     {
         $core->registerA &= 0xFD;
     }
@@ @@

     /**
      * Cbopcode #0x90.
-     *
-     * @param Core $core
      */
-    private static function cbopcode144(Core $core)
+    private function cbopcode144(Core $core): void
     {
         $core->registerB &= 0xFB;
     }
@@ @@

     /**
      * Cbopcode #0x91.
-     *
-     * @param Core $core
      */
-    private static function cbopcode145(Core $core)
+    private function cbopcode145(Core $core): void
     {
         $core->registerC &= 0xFB;
     }
@@ @@

     /**
      * Cbopcode #0x92.
-     *
-     * @param Core $core
      */
-    private static function cbopcode146(Core $core)
+    private function cbopcode146(Core $core): void
     {
         $core->registerD &= 0xFB;
     }
@@ @@

     /**
      * Cbopcode #0x93.
-     *
-     * @param Core $core
      */
-    private static function cbopcode147(Core $core)
+    private function cbopcode147(Core $core): void
     {
         $core->registerE &= 0xFB;
     }
@@ @@

     /**
      * Cbopcode #0x94.
-     *
-     * @param Core $core
      */
-    private static function cbopcode148(Core $core)
+    private function cbopcode148(Core $core): void
     {
         $core->registersHL &= 0xFBFF;
     }
@@ @@

     /**
      * Cbopcode #0x95.
-     *
-     * @param Core $core
      */
-    private static function cbopcode149(Core $core)
+    private function cbopcode149(Core $core): void
     {
         $core->registersHL &= 0xFFFB;
     }
@@ @@

     /**
      * Cbopcode #0x96.
-     *
-     * @param Core $core
      */
-    private static function cbopcode150(Core $core)
+    private function cbopcode150(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->memoryRead($core->registersHL) & 0xFB);
     }
@@ @@

     /**
      * Cbopcode #0x97.
-     *
-     * @param Core $core
      */
-    private static function cbopcode151(Core $core)
+    private function cbopcode151(Core $core): void
     {
         $core->registerA &= 0xFB;
     }
@@ @@

     /**
      * Cbopcode #0x98.
-     *
-     * @param Core $core
      */
-    private static function cbopcode152(Core $core)
+    private function cbopcode152(Core $core): void
     {
         $core->registerB &= 0xF7;
     }
@@ @@

     /**
      * Cbopcode #0x99.
-     *
-     * @param Core $core
      */
-    private static function cbopcode153(Core $core)
+    private function cbopcode153(Core $core): void
     {
         $core->registerC &= 0xF7;
     }
@@ @@

     /**
      * Cbopcode #0x9A.
-     *
-     * @param Core $core
      */
-    private static function cbopcode154(Core $core)
+    private function cbopcode154(Core $core): void
     {
         $core->registerD &= 0xF7;
     }
@@ @@

     /**
      * Cbopcode #0x9B.
-     *
-     * @param Core $core
      */
-    private static function cbopcode155(Core $core)
+    private function cbopcode155(Core $core): void
     {
         $core->registerE &= 0xF7;
     }
@@ @@

     /**
      * Cbopcode #0x9C.
-     *
-     * @param Core $core
      */
-    private static function cbopcode156(Core $core)
+    private function cbopcode156(Core $core): void
     {
         $core->registersHL &= 0xF7FF;
     }
@@ @@

     /**
      * Cbopcode #0x9D.
-     *
-     * @param Core $core
      */
-    private static function cbopcode157(Core $core)
+    private function cbopcode157(Core $core): void
     {
         $core->registersHL &= 0xFFF7;
     }
@@ @@

     /**
      * Cbopcode #0x9E.
-     *
-     * @param Core $core
      */
-    private static function cbopcode158(Core $core)
+    private function cbopcode158(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->memoryRead($core->registersHL) & 0xF7);
     }
@@ @@

     /**
      * Cbopcode #0x9F.
-     *
-     * @param Core $core
      */
-    private static function cbopcode159(Core $core)
+    private function cbopcode159(Core $core): void
     {
         $core->registerA &= 0xF7;
     }
@@ @@

     /**
      * Cbopcode #0xA0.
-     *
-     * @param Core $core
      */
-    private static function cbopcode160(Core $core)
+    private function cbopcode160(Core $core): void
     {
         $core->registerB &= 0xEF;
     }
@@ @@

     /**
      * Cbopcode #0xA1.
-     *
-     * @param Core $core
      */
-    private static function cbopcode161(Core $core)
+    private function cbopcode161(Core $core): void
     {
         $core->registerC &= 0xEF;
     }
@@ @@

     /**
      * Cbopcode #0xA2.
-     *
-     * @param Core $core
      */
-    private static function cbopcode162(Core $core)
+    private function cbopcode162(Core $core): void
     {
         $core->registerD &= 0xEF;
     }
@@ @@

     /**
      * Cbopcode #0xA3.
-     *
-     * @param Core $core
      */
-    private static function cbopcode163(Core $core)
+    private function cbopcode163(Core $core): void
     {
         $core->registerE &= 0xEF;
     }
@@ @@

     /**
      * Cbopcode #0xA4.
-     *
-     * @param Core $core
      */
-    private static function cbopcode164(Core $core)
+    private function cbopcode164(Core $core): void
     {
         $core->registersHL &= 0xEFFF;
     }
@@ @@

     /**
      * Cbopcode #0xA5.
-     *
-     * @param Core $core
      */
-    private static function cbopcode165(Core $core)
+    private function cbopcode165(Core $core): void
     {
         $core->registersHL &= 0xFFEF;
     }
@@ @@

     /**
      * Cbopcode #0xA6.
-     *
-     * @param Core $core
      */
-    private static function cbopcode166(Core $core)
+    private function cbopcode166(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->memoryRead($core->registersHL) & 0xEF);
     }
@@ @@

     /**
      * Cbopcode #0xA7.
-     *
-     * @param Core $core
      */
-    private static function cbopcode167(Core $core)
+    private function cbopcode167(Core $core): void
     {
         $core->registerA &= 0xEF;
     }
@@ @@

     /**
      * Cbopcode #0xA8.
-     *
-     * @param Core $core
      */
-    private static function cbopcode168(Core $core)
+    private function cbopcode168(Core $core): void
     {
         $core->registerB &= 0xDF;
     }
@@ @@

     /**
      * Cbopcode #0xA9.
-     *
-     * @param Core $core
      */
-    private static function cbopcode169(Core $core)
+    private function cbopcode169(Core $core): void
     {
         $core->registerC &= 0xDF;
     }
@@ @@

     /**
      * Cbopcode #0xAA.
-     *
-     * @param Core $core
      */
-    private static function cbopcode170(Core $core)
+    private function cbopcode170(Core $core): void
     {
         $core->registerD &= 0xDF;
     }
@@ @@

     /**
      * Cbopcode #0xAB.
-     *
-     * @param Core $core
      */
-    private static function cbopcode171(Core $core)
+    private function cbopcode171(Core $core): void
     {
         $core->registerE &= 0xDF;
     }
@@ @@

     /**
      * Cbopcode #0xAC.
-     *
-     * @param Core $core
      */
-    private static function cbopcode172(Core $core)
+    private function cbopcode172(Core $core): void
     {
         $core->registersHL &= 0xDFFF;
     }
@@ @@

     /**
      * Cbopcode #0xAD.
-     *
-     * @param Core $core
      */
-    private static function cbopcode173(Core $core)
+    private function cbopcode173(Core $core): void
     {
         $core->registersHL &= 0xFFDF;
     }
@@ @@

     /**
      * Cbopcode #0xAE.
-     *
-     * @param Core $core
      */
-    private static function cbopcode174(Core $core)
+    private function cbopcode174(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->memoryRead($core->registersHL) & 0xDF);
     }
@@ @@

     /**
      * Cbopcode #0xAF.
-     *
-     * @param Core $core
      */
-    private static function cbopcode175(Core $core)
+    private function cbopcode175(Core $core): void
     {
         $core->registerA &= 0xDF;
     }
@@ @@

     /**
      * Cbopcode #0xB0.
-     *
-     * @param Core $core
      */
-    private static function cbopcode176(Core $core)
+    private function cbopcode176(Core $core): void
     {
         $core->registerB &= 0xBF;
     }
@@ @@

     /**
      * Cbopcode #0xB1.
-     *
-     * @param Core $core
      */
-    private static function cbopcode177(Core $core)
+    private function cbopcode177(Core $core): void
     {
         $core->registerC &= 0xBF;
     }
@@ @@

     /**
      * Cbopcode #0xB2.
-     *
-     * @param Core $core
      */
-    private static function cbopcode178(Core $core)
+    private function cbopcode178(Core $core): void
     {
         $core->registerD &= 0xBF;
     }
@@ @@

     /**
      * Cbopcode #0xB3.
-     *
-     * @param Core $core
      */
-    private static function cbopcode179(Core $core)
+    private function cbopcode179(Core $core): void
     {
         $core->registerE &= 0xBF;
     }
@@ @@

     /**
      * Cbopcode #0xB4.
-     *
-     * @param Core $core
      */
-    private static function cbopcode180(Core $core)
+    private function cbopcode180(Core $core): void
     {
         $core->registersHL &= 0xBFFF;
     }
@@ @@

     /**
      * Cbopcode #0xB5.
-     *
-     * @param Core $core
      */
-    private static function cbopcode181(Core $core)
+    private function cbopcode181(Core $core): void
     {
         $core->registersHL &= 0xFFBF;
     }
@@ @@

     /**
      * Cbopcode #0xB6.
-     *
-     * @param Core $core
      */
-    private static function cbopcode182(Core $core)
+    private function cbopcode182(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->memoryRead($core->registersHL) & 0xBF);
     }
@@ @@

     /**
      * Cbopcode #0xB7.
-     *
-     * @param Core $core
      */
-    private static function cbopcode183(Core $core)
+    private function cbopcode183(Core $core): void
     {
         $core->registerA &= 0xBF;
     }
@@ @@

     /**
      * Cbopcode #0xB8.
-     *
-     * @param Core $core
      */
-    private static function cbopcode184(Core $core)
+    private function cbopcode184(Core $core): void
     {
         $core->registerB &= 0x7F;
     }
@@ @@

     /**
      * Cbopcode #0xB9.
-     *
-     * @param Core $core
      */
-    private static function cbopcode185(Core $core)
+    private function cbopcode185(Core $core): void
     {
         $core->registerC &= 0x7F;
     }
@@ @@

     /**
      * Cbopcode #0xBA.
-     *
-     * @param Core $core
      */
-    private static function cbopcode186(Core $core)
+    private function cbopcode186(Core $core): void
     {
         $core->registerD &= 0x7F;
     }
@@ @@

     /**
      * Cbopcode #0xBB.
-     *
-     * @param Core $core
      */
-    private static function cbopcode187(Core $core)
+    private function cbopcode187(Core $core): void
     {
         $core->registerE &= 0x7F;
     }
@@ @@

     /**
      * Cbopcode #0xBC.
-     *
-     * @param Core $core
      */
-    private static function cbopcode188(Core $core)
+    private function cbopcode188(Core $core): void
     {
         $core->registersHL &= 0x7FFF;
     }
@@ @@

     /**
      * Cbopcode #0xBD.
-     *
-     * @param Core $core
      */
-    private static function cbopcode189(Core $core)
+    private function cbopcode189(Core $core): void
     {
         $core->registersHL &= 0xFF7F;
     }
@@ @@

     /**
      * Cbopcode #0xBE.
-     *
-     * @param Core $core
      */
-    private static function cbopcode190(Core $core)
+    private function cbopcode190(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->memoryRead($core->registersHL) & 0x7F);
     }
@@ @@

     /**
      * Cbopcode #0xBF.
-     *
-     * @param Core $core
      */
-    private static function cbopcode191(Core $core)
+    private function cbopcode191(Core $core): void
     {
         $core->registerA &= 0x7F;
     }
@@ @@

     /**
      * Cbopcode #0xC0.
-     *
-     * @param Core $core
      */
-    private static function cbopcode192(Core $core)
+    private function cbopcode192(Core $core): void
     {
         $core->registerB |= 0x01;
     }
@@ @@

     /**
      * Cbopcode #0xC1.
-     *
-     * @param Core $core
      */
-    private static function cbopcode193(Core $core)
+    private function cbopcode193(Core $core): void
     {
         $core->registerC |= 0x01;
     }
@@ @@

     /**
      * Cbopcode #0xC2.
-     *
-     * @param Core $core
      */
-    private static function cbopcode194(Core $core)
+    private function cbopcode194(Core $core): void
     {
         $core->registerD |= 0x01;
     }
@@ @@

     /**
      * Cbopcode #0xC3.
-     *
-     * @param Core $core
      */
-    private static function cbopcode195(Core $core)
+    private function cbopcode195(Core $core): void
     {
         $core->registerE |= 0x01;
     }
@@ @@

     /**
      * Cbopcode #0xC4.
-     *
-     * @param Core $core
      */
-    private static function cbopcode196(Core $core)
+    private function cbopcode196(Core $core): void
     {
         $core->registersHL |= 0x0100;
     }
@@ @@

     /**
      * Cbopcode #0xC5.
-     *
-     * @param Core $core
      */
-    private static function cbopcode197(Core $core)
+    private function cbopcode197(Core $core): void
     {
         $core->registersHL |= 0x01;
     }
@@ @@

     /**
      * Cbopcode #0xC6.
-     *
-     * @param Core $core
      */
-    private static function cbopcode198(Core $core)
+    private function cbopcode198(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->memoryRead($core->registersHL) | 0x01);
     }
@@ @@

     /**
      * Cbopcode #0xC7.
-     *
-     * @param Core $core
      */
-    private static function cbopcode199(Core $core)
+    private function cbopcode199(Core $core): void
     {
         $core->registerA |= 0x01;
     }
@@ @@

     /**
      * Cbopcode #0xC8.
-     *
-     * @param Core $core
      */
-    private static function cbopcode200(Core $core)
+    private function cbopcode200(Core $core): void
     {
         $core->registerB |= 0x02;
     }
@@ @@

     /**
      * Cbopcode #0xC9.
-     *
-     * @param Core $core
      */
-    private static function cbopcode201(Core $core)
+    private function cbopcode201(Core $core): void
     {
         $core->registerC |= 0x02;
     }
@@ @@

     /**
      * Cbopcode #0xCA.
-     *
-     * @param Core $core
      */
-    private static function cbopcode202(Core $core)
+    private function cbopcode202(Core $core): void
     {
         $core->registerD |= 0x02;
     }
@@ @@

     /**
      * Cbopcode #0xCB.
-     *
-     * @param Core $core
      */
-    private static function cbopcode203(Core $core)
+    private function cbopcode203(Core $core): void
     {
         $core->registerE |= 0x02;
     }
@@ @@

     /**
      * Cbopcode #0xCC.
-     *
-     * @param Core $core
      */
-    private static function cbopcode204(Core $core)
+    private function cbopcode204(Core $core): void
     {
         $core->registersHL |= 0x0200;
     }
@@ @@

     /**
      * Cbopcode #0xCD.
-     *
-     * @param Core $core
      */
-    private static function cbopcode205(Core $core)
+    private function cbopcode205(Core $core): void
     {
         $core->registersHL |= 0x02;
     }
@@ @@

     /**
      * Cbopcode #0xCE.
-     *
-     * @param Core $core
      */
-    private static function cbopcode206(Core $core)
+    private function cbopcode206(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->memoryRead($core->registersHL) | 0x02);
     }
@@ @@

     /**
      * Cbopcode #0xCF.
-     *
-     * @param Core $core
      */
-    private static function cbopcode207(Core $core)
+    private function cbopcode207(Core $core): void
     {
         $core->registerA |= 0x02;
     }
@@ @@

     /**
      * Cbopcode #0xD0.
-     *
-     * @param Core $core
      */
-    private static function cbopcode208(Core $core)
+    private function cbopcode208(Core $core): void
     {
         $core->registerB |= 0x04;
     }
@@ @@

     /**
      * Cbopcode #0xD1.
-     *
-     * @param Core $core
      */
-    private static function cbopcode209(Core $core)
+    private function cbopcode209(Core $core): void
     {
         $core->registerC |= 0x04;
     }
@@ @@

     /**
      * Cbopcode #0xD2.
-     *
-     * @param Core $core
      */
-    private static function cbopcode210(Core $core)
+    private function cbopcode210(Core $core): void
     {
         $core->registerD |= 0x04;
     }
@@ @@

     /**
      * Cbopcode #0xD3.
-     *
-     * @param Core $core
      */
-    private static function cbopcode211(Core $core)
+    private function cbopcode211(Core $core): void
     {
         $core->registerE |= 0x04;
     }
@@ @@

     /**
      * Cbopcode #0xD4.
-     *
-     * @param Core $core
      */
-    private static function cbopcode212(Core $core)
+    private function cbopcode212(Core $core): void
     {
         $core->registersHL |= 0x0400;
     }
@@ @@

     /**
      * Cbopcode #0xD5.
-     *
-     * @param Core $core
      */
-    private static function cbopcode213(Core $core)
+    private function cbopcode213(Core $core): void
     {
         $core->registersHL |= 0x04;
     }
@@ @@

     /**
      * Cbopcode #0xD6.
-     *
-     * @param Core $core
      */
-    private static function cbopcode214(Core $core)
+    private function cbopcode214(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->memoryRead($core->registersHL) | 0x04);
     }
@@ @@

     /**
      * Cbopcode #0xD7.
-     *
-     * @param Core $core
      */
-    private static function cbopcode215(Core $core)
+    private function cbopcode215(Core $core): void
     {
         $core->registerA |= 0x04;
     }
@@ @@

     /**
      * Cbopcode #0xD8.
-     *
-     * @param Core $core
      */
-    private static function cbopcode216(Core $core)
+    private function cbopcode216(Core $core): void
     {
         $core->registerB |= 0x08;
     }
@@ @@

     /**
      * Cbopcode #0xD9.
-     *
-     * @param Core $core
      */
-    private static function cbopcode217(Core $core)
+    private function cbopcode217(Core $core): void
     {
         $core->registerC |= 0x08;
     }
@@ @@

     /**
      * Cbopcode #0xDA.
-     *
-     * @param Core $core
      */
-    private static function cbopcode218(Core $core)
+    private function cbopcode218(Core $core): void
     {
         $core->registerD |= 0x08;
     }
@@ @@

     /**
      * Cbopcode #0xDB.
-     *
-     * @param Core $core
      */
-    private static function cbopcode219(Core $core)
+    private function cbopcode219(Core $core): void
     {
         $core->registerE |= 0x08;
     }
@@ @@

     /**
      * Cbopcode #0xDC.
-     *
-     * @param Core $core
      */
-    private static function cbopcode220(Core $core)
+    private function cbopcode220(Core $core): void
     {
         $core->registersHL |= 0x0800;
     }
@@ @@

     /**
      * Cbopcode #0xDD.
-     *
-     * @param Core $core
      */
-    private static function cbopcode221(Core $core)
+    private function cbopcode221(Core $core): void
     {
         $core->registersHL |= 0x08;
     }
@@ @@

     /**
      * Cbopcode #0xDE.
-     *
-     * @param Core $core
      */
-    private static function cbopcode222(Core $core)
+    private function cbopcode222(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->memoryRead($core->registersHL) | 0x08);
     }
@@ @@

     /**
      * Cbopcode #0xDF.
-     *
-     * @param Core $core
      */
-    private static function cbopcode223(Core $core)
+    private function cbopcode223(Core $core): void
     {
         $core->registerA |= 0x08;
     }
@@ @@

     /**
      * Cbopcode #0xE0.
-     *
-     * @param Core $core
      */
-    private static function cbopcode224(Core $core)
+    private function cbopcode224(Core $core): void
     {
         $core->registerB |= 0x10;
     }
@@ @@

     /**
      * Cbopcode #0xE1.
-     *
-     * @param Core $core
      */
-    private static function cbopcode225(Core $core)
+    private function cbopcode225(Core $core): void
     {
         $core->registerC |= 0x10;
     }
@@ @@

     /**
      * Cbopcode #0xE2.
-     *
-     * @param Core $core
      */
-    private static function cbopcode226(Core $core)
+    private function cbopcode226(Core $core): void
     {
         $core->registerD |= 0x10;
     }
@@ @@

     /**
      * Cbopcode #0xE3.
-     *
-     * @param Core $core
      */
-    private static function cbopcode227(Core $core)
+    private function cbopcode227(Core $core): void
     {
         $core->registerE |= 0x10;
     }
@@ @@

     /**
      * Cbopcode #0xE4.
-     *
-     * @param Core $core
      */
-    private static function cbopcode228(Core $core)
+    private function cbopcode228(Core $core): void
     {
         $core->registersHL |= 0x1000;
     }
@@ @@

     /**
      * Cbopcode #0xE5.
-     *
-     * @param Core $core
      */
-    private static function cbopcode229(Core $core)
+    private function cbopcode229(Core $core): void
     {
         $core->registersHL |= 0x10;
     }
@@ @@

     /**
      * Cbopcode #0xE6.
-     *
-     * @param Core $core
      */
-    private static function cbopcode230(Core $core)
+    private function cbopcode230(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->memoryRead($core->registersHL) | 0x10);
     }
@@ @@

     /**
      * Cbopcode #0xE7.
-     *
-     * @param Core $core
      */
-    private static function cbopcode231(Core $core)
+    private function cbopcode231(Core $core): void
     {
         $core->registerA |= 0x10;
     }
@@ @@

     /**
      * Cbopcode #0xE8.
-     *
-     * @param Core $core
      */
-    private static function cbopcode232(Core $core)
+    private function cbopcode232(Core $core): void
     {
         $core->registerB |= 0x20;
     }
@@ @@

     /**
      * Cbopcode #0xE9.
-     *
-     * @param Core $core
      */
-    private static function cbopcode233(Core $core)
+    private function cbopcode233(Core $core): void
     {
         $core->registerC |= 0x20;
     }
@@ @@

     /**
      * Cbopcode #0xEA.
-     *
-     * @param Core $core
      */
-    private static function cbopcode234(Core $core)
+    private function cbopcode234(Core $core): void
     {
         $core->registerD |= 0x20;
     }
@@ @@

     /**
      * Cbopcode #0xEB.
-     *
-     * @param Core $core
      */
-    private static function cbopcode235(Core $core)
+    private function cbopcode235(Core $core): void
     {
         $core->registerE |= 0x20;
     }
@@ @@

     /**
      * Cbopcode #0xEC.
-     *
-     * @param Core $core
      */
-    private static function cbopcode236(Core $core)
+    private function cbopcode236(Core $core): void
     {
         $core->registersHL |= 0x2000;
     }
@@ @@

     /**
      * Cbopcode #0xED.
-     *
-     * @param Core $core
      */
-    private static function cbopcode237(Core $core)
+    private function cbopcode237(Core $core): void
     {
         $core->registersHL |= 0x20;
     }
@@ @@

     /**
      * Cbopcode #0xEE.
-     *
-     * @param Core $core
      */
-    private static function cbopcode238(Core $core)
+    private function cbopcode238(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->memoryRead($core->registersHL) | 0x20);
     }
@@ @@

     /**
      * Cbopcode #0xEF.
-     *
-     * @param Core $core
      */
-    private static function cbopcode239(Core $core)
+    private function cbopcode239(Core $core): void
     {
         $core->registerA |= 0x20;
     }
@@ @@

     /**
      * Cbopcode #0xF0.
-     *
-     * @param Core $core
      */
-    private static function cbopcode240(Core $core)
+    private function cbopcode240(Core $core): void
     {
         $core->registerB |= 0x40;
     }
@@ @@

     /**
      * Cbopcode #0xF1.
-     *
-     * @param Core $core
      */
-    private static function cbopcode241(Core $core)
+    private function cbopcode241(Core $core): void
     {
         $core->registerC |= 0x40;
     }
@@ @@

     /**
      * Cbopcode #0xF2.
-     *
-     * @param Core $core
      */
-    private static function cbopcode242(Core $core)
+    private function cbopcode242(Core $core): void
     {
         $core->registerD |= 0x40;
     }
@@ @@

     /**
      * Cbopcode #0xF3.
-     *
-     * @param Core $core
      */
-    private static function cbopcode243(Core $core)
+    private function cbopcode243(Core $core): void
     {
         $core->registerE |= 0x40;
     }
@@ @@

     /**
      * Cbopcode #0xF4.
-     *
-     * @param Core $core
      */
-    private static function cbopcode244(Core $core)
+    private function cbopcode244(Core $core): void
     {
         $core->registersHL |= 0x4000;
     }
@@ @@

     /**
      * Cbopcode #0xF5.
-     *
-     * @param Core $core
      */
-    private static function cbopcode245(Core $core)
+    private function cbopcode245(Core $core): void
     {
         $core->registersHL |= 0x40;
     }
@@ @@

     /**
      * Cbopcode #0xF6.
-     *
-     * @param Core $core
      */
-    private static function cbopcode246(Core $core)
+    private function cbopcode246(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->memoryRead($core->registersHL) | 0x40);
     }
@@ @@

     /**
      * Cbopcode #0xF7.
-     *
-     * @param Core $core
      */
-    private static function cbopcode247(Core $core)
+    private function cbopcode247(Core $core): void
     {
         $core->registerA |= 0x40;
     }
@@ @@

     /**
      * Cbopcode #0xF8.
-     *
-     * @param Core $core
      */
-    private static function cbopcode248(Core $core)
+    private function cbopcode248(Core $core): void
     {
         $core->registerB |= 0x80;
     }
@@ @@

     /**
      * Cbopcode #0xF9.
-     *
-     * @param Core $core
      */
-    private static function cbopcode249(Core $core)
+    private function cbopcode249(Core $core): void
     {
         $core->registerC |= 0x80;
     }
@@ @@

     /**
      * Cbopcode #0xFA.
-     *
-     * @param Core $core
      */
-    private static function cbopcode250(Core $core)
+    private function cbopcode250(Core $core): void
     {
         $core->registerD |= 0x80;
     }
@@ @@

     /**
      * Cbopcode #0xFB.
-     *
-     * @param Core $core
      */
-    private static function cbopcode251(Core $core)
+    private function cbopcode251(Core $core): void
     {
         $core->registerE |= 0x80;
     }
@@ @@

     /**
      * Cbopcode #0xFC.
-     *
-     * @param Core $core
      */
-    private static function cbopcode252(Core $core)
+    private function cbopcode252(Core $core): void
     {
         $core->registersHL |= 0x8000;
     }
@@ @@

     /**
      * Cbopcode #0xFD.
-     *
-     * @param Core $core
      */
-    private static function cbopcode253(Core $core)
+    private function cbopcode253(Core $core): void
     {
         $core->registersHL |= 0x80;
     }
@@ @@

     /**
      * Cbopcode #0xFE.
-     *
-     * @param Core $core
      */
-    private static function cbopcode254(Core $core)
+    private function cbopcode254(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->memoryRead($core->registersHL) | 0x80);
     }
@@ @@

     /**
      * Cbopcode #0xFF.
-     *
-     * @param Core $core
      */
-    private static function cbopcode255(Core $core)
+    private function cbopcode255(Core $core): void
     {
         $core->registerA |= 0x80;
     }
    ----------- end diff -----------

Applied rules:
 * LocallyCalledStaticMethodToNonStaticRector
 * SplitDoubleAssignRector
 * NewlineBeforeNewAssignSetRector
 * RemoveUselessParamTagRector
 * AddVoidReturnTypeWhereNoReturnRector


3) src/Core.php:1

    ---------- begin diff ----------
@@ @@

 namespace GameBoy;

+use Exception;
+
 class Core
 {
-    // LCD Context
-    public $drawContext = null;
-
-    //The game's ROM.
-    public $ROMImage;
-
+    /**
+     * @var bool
+     */
+    public $cBATT;
+    public $numROMBanks;
+    /**
+     * @var bool
+     */
+    public $RTCHalt;
     //The full ROM file dumped to an array.
     public $ROM = [];

@@ @@
     public $savedStateFileName = '';

     //lcdControllerler object
-    public $lcdController = null;
+    /**
+     * @var LcdController
+     */
+    public $lcdController;

     public $gfxWindowY = false;

@@ @@
     public $rgbCount;

     //Pointer to the current palette we're using (Used for palette switches during boot or so it can be done anytime)
-    public $palette = null;
+    public $palette;

     //
     //Data
@@ @@

     // Added

-    public $cTIMER = null;
+    public $cTIMER;

-    public function __construct($ROMImage, $drawContext)
+    public function __construct(public $ROMImage, public $drawContext)
     {
-        $this->drawContext = $drawContext;
-        $this->ROMImage = $ROMImage;
-
         $this->tileCountInvalidator = $this->tileCount * 4;

         $this->ROMBanks[0x52] = 72;
@@ @@
         $this->lcdController = new LcdController($this);
     }

-    public function saveState()
+    public function saveState(): array
     {
         return [
             $this->fromTypedArray($this->ROM),
@@ @@
         ];
     }

-    public function returnFromState($returnedFrom)
+    public function returnFromState($returnedFrom): void
     {
         $address = 0;
         $state = $returnedFrom->slice(0);
@@ @@
         $this->drawToCanvas();
     }

-    public function start()
+    public function start(): void
     {
         Settings::$frameskipAmout = 0; //Reset the frame skip setting.
         $this->initMemory(); //Write the startup memory.
@@ @@
         $this->run(); //Start the emulation.
     }

-    public function initMemory()
+    public function initMemory(): void
     {
         //Initialize the RAM:
         $this->memory = $this->getTypedArray(0x10000, 0, 'uint8');
@@ @@
         }
     }

-    public function initSkipBootstrap()
+    public function initSkipBootstrap(): void
     {
         //Start as an unset device:
         echo 'Starting without the GBC boot ROM'.PHP_EOL;
@@ @@
                         $this->memory[0xFF00 + $address] = $this->ffxxDump[$address];
                 }
             }
+
             --$address;
         }
     }

-    public function initBootstrap()
+    public function initBootstrap(): void
     {
         //Start as an unset device:
         echo 'Starting the GBC boot ROM.'.PHP_EOL;
@@ @@
         $this->registerC = 0;
         $this->registerD = 0;
         $this->registerE = 0;
-        $this->FZero = $this->FSubtract = $this->FHalfCarry = $this->FCarry = false;
+        $this->FZero = false;
+        $this->FSubtract = false;
+        $this->FHalfCarry = false;
+        $this->FCarry = false;
         $this->registersHL = 0;
         $this->memory[0xFF00] = 0xF; //Set the joypad state.
     }

-    public function ROMLoad()
+    public function ROMLoad(): void
     {
         //Load the first two ROM banks (0x0000 - 0x7FFF) into regular gameboy memory:
-        $this->ROM = $this->getTypedArray(strlen($this->ROMImage), 0, 'uint8');
+        $this->ROM = $this->getTypedArray(strlen((string) $this->ROMImage), 0, 'uint8');

-        for ($romIndex = 0; $romIndex < strlen($this->ROMImage); ++$romIndex) {
+        for ($romIndex = 0; $romIndex < strlen((string) $this->ROMImage); ++$romIndex) {
             $this->ROM[$romIndex] = (ord($this->ROMImage[$romIndex]) & 0xFF);
             if ($romIndex < 0x8000) {
                 $this->memory[$romIndex] = $this->ROM[$romIndex]; //Load in the game ROM.
             }
         }
+
         // ROM name
         for ($address = 0x134; $address < 0x13F; ++$address) {
             if (ord($this->ROMImage[$address]) > 0) {
@@ @@
         }
     }

-    public function disableBootROM()
+    public function disableBootROM(): void
     {
         //Remove any traces of the boot ROM from ROM memory.
         for ($address = 0; $address < 0x900; ++$address) {
@@ @@
                 $this->memory[$address] = $this->ROM[$address]; //Replace the GameBoy Color boot ROM with the game ROM.
             }
         }
+
         $this->checkPaletteType();

         if (!$this->cGBC) {
@@ @@
             if (!Settings::$colorize) {
                 $this->transparentCutoff = 4;
             }
+
             $this->colorCount = 12;

             // @TODO
@@ @@
         }
     }

-    public function setupRAM()
+    public function setupRAM(): void
     {
         //Setup the auxilliary/switchable RAM to their maximum possible size (Bad headers can lie).
         if ($this->cMBC2) {
@@ @@
         } elseif ($this->cSRAM) {
             $this->numRAMBanks = 1;
         }
+
         if ($this->numRAMBanks > 0) {
             if (!$this->MBCRAMUtilized()) {
                 //For ROM and unknown MBC cartridges using the external RAM:
                 $this->MBCRAMBanksEnabled = true;
             }
+
             //Switched RAM Used
             $this->MBCRam = $this->getTypedArray($this->numRAMBanks * 0x2000, 0, 'uint8');
         }
+
         echo 'Actual bytes of MBC RAM allocated: '.($this->numRAMBanks * 0x2000).PHP_EOL;
         //Setup the RAM for GBC mode.
         if ($this->cGBC) {
@@ @@
             $this->colorCount = 64;
             $this->transparentCutoff = 32;
         }
+
         $this->tileData = $this->arrayPad($this->tileCount * $this->colorCount, null);
         $this->tileReadState = $this->getTypedArray($this->tileCount, 0, 'uint8');
     }

-    public function MBCRAMUtilized()
+    public function MBCRAMUtilized(): bool
     {
         return $this->cMBC1 || $this->cMBC2 || $this->cMBC3 || $this->cMBC5 || $this->cRUMBLE;
     }

-    public function initLCD()
+    public function initLCD(): void
     {
         $this->transparentCutoff = (Settings::$colorize || $this->cGBC) ? 32 : 4;
         if (count($this->weaveLookup) == 0) {
@@ @@
         $this->drawContext->draw($this->canvasBuffer);
     }

-    public function joyPadEvent($key, $down)
+    public function joyPadEvent($key, $down): void
     {
         if ($down) {
             $this->JoyPad &= 0xFF ^ (1 << $key);
@@ @@
         } else {
             $this->JoyPad |= (1 << $key);
         }
+
         $this->memory[0xFF00] = ($this->memory[0xFF00] & 0x30) + (((($this->memory[0xFF00] & 0x20) == 0) ? ($this->JoyPad >> 4) : 0xF) & ((($this->memory[0xFF00] & 0x10) == 0) ? ($this->JoyPad & 0xF) : 0xF));
     }

-    public function run()
+    public function run(): void
     {
         //The preprocessing before the actual iteration loop:
         try {
@@ @@
                         $this->updateCore();
                         $this->executeIteration();
                     }
+
                 //We can only get here if there was an internal error, but the loop was restarted.
                 } else {
                     echo 'Iterator restarted a faulted core.'.PHP_EOL;
@@ @@
                     pause();
                 }
             }
-        } catch (\Exception $error) {
-            if ($error->getMessage() != 'HALT_OVERRUN') {
+        } catch (Exception $exception) {
+            if ($exception->getMessage() !== 'HALT_OVERRUN') {
                 echo 'GameBoy runtime error'.PHP_EOL;
             }
         }
     }

-    public function executeIteration()
+    public function executeIteration(): void
     {
         //Iterate the interpreter loop:
         $op = 0;
@@ @@
                 //Increment the program counter to the next instruction:
                 $this->programCounter = ($this->programCounter + 1) & 0xFFFF;
             }
+
             $this->skipPCIncrement = false;
             //Get how many CPU cycles the current op code counts for:
             $this->CPUTicks = $this->TICKTable[$op];
@@ @@
                     $this->untilEnable--;
                     // no break
             }
+
             //Execute Interrupt:
             if ($this->IME) {
                 $this->runInterrupt();
             }
+
             //Timing:
             $this->updateCore();
         }
     }

-    public function runInterrupt()
+    public function runInterrupt(): void
     {
         $bitShift = 0;
         $testbit = 1;
@@ @@

         while ($bitShift < 5) {
             //Check to see if an interrupt is enabled AND requested.
-            if (($testbit & $interrupts) == $testbit) {
+            if (($testbit & $interrupts) === $testbit) {
                 $this->IME = false; //Reset the interrupt enabling.
                 $this->memory[0xFF0F] -= $testbit; //Reset the interrupt request.
                 //Set the stack pointer to the current program counter value:
@@ @@
         }
     }

-    public function updateCore()
+    public function updateCore(): void
     {
         // DIV control
         $this->DIVTicks += $this->CPUTicks;
@@ @@
             $this->DIVTicks -= 0x40;
             $this->memory[0xFF04] = ($this->memory[0xFF04] + 1) & 0xFF; // inc DIV
         }
+
         //LCD Controller Ticks
         $timedTicks = $this->CPUTicks / $this->multiplier;
         // LCD Timing
@@ @@
             $this->emulatorTicks += $this->audioTicks;
             if ($this->emulatorTicks >= Settings::$machineCyclesPerLoop) {
                 //Make sure we don't overdo the audio.
-                if (($this->stopEmulator & 1) == 0) {
-                    //LCD off takes at least 2 frames.
-                    if ($this->drewBlank == 0) {
-                        $this->drawToCanvas(); //Display frame
-                    }
+                //LCD off takes at least 2 frames.
+                if (($this->stopEmulator & 1) == 0 && $this->drewBlank == 0) {
+                    $this->drawToCanvas();
+                    //Display frame
                 }
+
                 $this->stopEmulator |= 1; //End current loop.
                 $this->emulatorTicks = 0;
             }
+
             $this->audioTicks = 0;
         }

@@ @@
         }
     }

-    public function displayShowOff()
+    public function displayShowOff(): void
     {
         if ($this->drewBlank == 0) {
             if ($this->drawContext->colorEnabled) {
@@ @@
         }
     }

-    public function performHdma()
+    public function performHdma(): void
     {
         $this->CPUTicks += 1 + (8 * $this->multiplier);

@@ @@
                             $this->tileData[$r] = null;
                             $r -= $this->tileCount;
                         } while ($r >= 0);
+
                         $this->tileReadState[$tileIndex] = 0;
                     }
                 }
+
                 $this->VRAM[$dmaDstRelative++] = $this->memoryRead($dmaSrc++);
             }
         } else {
@@ @@
                         $this->tileReadState[$tileIndex] = 0;
                     }
                 }
+
                 $this->memory[0x8000 + $dmaDstRelative++] = $this->memoryRead($dmaSrc++);
             }
         }
@@ @@
         }
     }

-    public function clockUpdate()
+    public function clockUpdate(): void
     {
         //We're tying in the same timer for RTC and frame skipping, since we can and this reduces load.
         if (Settings::$autoFrameskip || $this->cTIMER) {
@@ @@
                     }
                 }
             }
+
             if (Settings::$autoFrameskip) {
                 //Auto Frame Skip:
                 if ($timeElapsed > Settings::$loopInterval) {
@@ @@
                     --Settings::$frameskipAmout;
                 }
             }
+
             $this->lastIteration = (int) (microtime(true) * 1000);
         }
     }

-    public function drawToCanvas()
+    public function drawToCanvas(): void
     {
         //Draw the frame buffer to the canvas:
         if (Settings::$frameskipAmout == 0 || $this->frameCount > 0) {
@@ @@
                     $b = $this->frameBuffer[$bufferIndex] & 0xFF;

                     // 350 is a good threshold for black and white
-                    if ($r + $g + $b > 350) {
-                        $this->canvasBuffer[$bufferIndex] = true;
-                    } else {
-                        $this->canvasBuffer[$bufferIndex] = false;
-                    }
+                    $this->canvasBuffer[$bufferIndex] = $r + $g + $b > 350;
                 }
             }

@@ @@
         }
     }

-    public function invalidateAll($pal)
+    public function invalidateAll($pal): void
     {
         $stop = ($pal + 1) * $this->tileCountInvalidator;
         for ($r = $pal * $this->tileCountInvalidator; $r < $stop; ++$r) {
@@ @@
         }
     }

-    public function setGBCPalettePre($address_, $data)
+    public function setGBCPalettePre($address_, $data): void
     {
         if ($this->gbcRawPalette[$address_] == $data) {
             return;
         }
+
         $this->gbcRawPalette[$address_] = $data;
         if ($address_ >= 0x40 && ($address_ & 0x6) == 0) {
             // stay transparent
             return;
         }
+
         $value = ($this->gbcRawPalette[$address_ | 1] << 8) + $this->gbcRawPalette[$address_ & -2];
         $this->gbcPalette[$address_ >> 1] = 0x80000000 + (($value & 0x1F) << 19) + (($value & 0x3E0) << 6) + (($value & 0x7C00) >> 7);
         $this->invalidateAll($address_ >> 3);
     }

-    public function setGBCPalette($address_, $data)
+    public function setGBCPalette($address_, $data): void
     {
         $this->setGBCPalettePre($address_, $data);
         if (($address_ & 0x6) == 0) {
@@ @@
         }
     }

-    public function decodePalette($startIndex, $data)
+    public function decodePalette($startIndex, $data): void
     {
         if (!$this->cGBC) {
             $this->gbPalette[$startIndex] = $this->colors[$data & 0x03] & 0x00FFFFFF; // color 0: transparent
@@ @@
                     $skippedTile = true;
                     continue;
                 }
+
                 $tileAttrib = (($mapAttrib & 0x07) << 2) + (($mapAttrib >> 5) & 0x03);
                 $tileNum += 384 * (($mapAttrib >> 3) & 0x01); // tile vram bank
             }
+
             $this->drawPartCopy($tileNum, $screenX, $line, $sourceImageLine, $tileAttrib);
         }

@@ @@
                         $skippedTile = true;
                         continue;
                     }
+
                     $tileAttrib = (($mapAttrib & 0x07) << 2) + (($mapAttrib >> 5) & 0x03); // mirroring
                     $tileNum += 384 * (($mapAttrib >> 3) & 0x01); // tile vram bank
                 }
+
                 $this->drawPartCopy($tileNum, $screenX, $line, $windowSourceTileLine, $tileAttrib);
             }
         }
@@ @@
         return $skippedTile;
     }

-    public function drawPartCopy($tileIndex, $x, $y, $sourceLine, $attribs)
+    public function drawPartCopy($tileIndex, $x, $y, $sourceLine, $attribs): void
     {
-        $image = $this->tileData[$tileIndex + $this->tileCount * $attribs] ? $this->tileData[$tileIndex + $this->tileCount * $attribs] : $this->updateImage($tileIndex, $attribs);
+        $image = $this->tileData[$tileIndex + $this->tileCount * $attribs] ?: $this->updateImage($tileIndex, $attribs);
         $dst = $x + $y * 160;
         $src = $sourceLine * 8;
         $dstEnd = ($x > 152) ? (($y + 1) * 160) : ($dst + 8);
@@ @@
         }
     }

-    public function checkPaletteType()
+    public function checkPaletteType(): void
     {
         //Reference the correct palette ahead of time...
         $this->palette = ($this->cGBC) ? $this->gbcPalette : ((Settings::$colorize) ? $this->gbColorizedPalette : $this->gbPalette);
@@ @@
             $pixixdy = -16;
             $pixix = 56;
         }
+
         if (($attribs & 1) == 0) {
             $pixixdx = -1;
             $pixix += 7;
             $pixixdy += 16;
         }
+
         for ($y = 8; --$y >= 0;) {
             $num = $this->weaveLookup[$this->VRAMReadGFX($offset++, $otherBank)] + ($this->weaveLookup[$this->VRAMReadGFX($offset++, $otherBank)] << 1);
             if ($num != 0) {
                 $transparent = false;
             }
+
             for ($x = 8; --$x >= 0;) {
                 $tempPix[$pixix] = $this->palette[$paletteStart + ($num & 3)] & -1;
                 $pixix += $pixixdx;
                 $num >>= 2;
             }
+
             $pixix += $pixixdy;
         }
+
         $this->tileData[$address_] = ($transparent) ? true : $tempPix;

         $this->tileReadState[$tileIndex] = 1;
@@ @@
         return $this->tileData[$address_];
     }

-    public function drawSpritesForLine($line)
+    public function drawSpritesForLine($line): void
     {
         if (!$this->gfxSpriteShow) {
             return;
         }
+
         $minSpriteY = $line - (($this->gfxSpriteDouble) ? 15 : 7);
         // either only do priorityFlag == 0 (all foreground),
         // or first 0x80 (background) and then 0 (foreground)
@@ @@
                     if ($spriteX >= 160 || $spriteY < $minSpriteY || $offset < 0) {
                         continue;
                     }
+
                     if ($this->gfxSpriteDouble) {
-                        $tileNum = $tileNum & 0xFE;
+                        $tileNum &= 0xFE;
                     }
+
                     $spriteAttrib = ($attributes >> 5) & 0x03; // flipx: from bit 0x20 to 0x01, flipy: from bit 0x40 to 0x02
                     if ($this->cGBC) {
                         $spriteAttrib += 0x20 + (($attributes & 0x07) << 2); // palette
@@ @@
                         // spriteAttrib: 0x04: OBJ1 palette, 0x08: OBJ2 palette
                         $spriteAttrib += 0x4 + (($attributes & 0x10) >> 2);
                     }
+
                     if ($priorityFlag == 0x80) {
                         // background
                         if ($this->gfxSpriteDouble) {
@@ @@
                         } else {
                             $this->drawPartBgSprite($tileNum, $spriteX, $line, $offset, $spriteAttrib);
                         }
-                    } else {
+                    } elseif ($this->gfxSpriteDouble) {
                         // foreground
-                        if ($this->gfxSpriteDouble) {
-                            if (($spriteAttrib & 2) != 0) {
-                                $this->drawPartFgSprite(($tileNum | 1) - ($offset >> 3), $spriteX, $line, $offset & 7, $spriteAttrib);
-                            } else {
-                                $this->drawPartFgSprite(($tileNum & -2) + ($offset >> 3), $spriteX, $line, $offset & 7, $spriteAttrib);
-                            }
+                        if (($spriteAttrib & 2) != 0) {
+                            $this->drawPartFgSprite(($tileNum | 1) - ($offset >> 3), $spriteX, $line, $offset & 7, $spriteAttrib);
                         } else {
-                            $this->drawPartFgSprite($tileNum, $spriteX, $line, $offset, $spriteAttrib);
+                            $this->drawPartFgSprite(($tileNum & -2) + ($offset >> 3), $spriteX, $line, $offset & 7, $spriteAttrib);
                         }
+                    } else {
+                        $this->drawPartFgSprite($tileNum, $spriteX, $line, $offset, $spriteAttrib);
                     }
                 } else {
                     $oamIx -= 3;
@@ @@
         }
     }

-    public function drawPartFgSprite($tileIndex, $x, $y, $sourceLine, $attribs)
+    public function drawPartFgSprite($tileIndex, $x, $y, $sourceLine, $attribs): void
     {
-        $im = $this->tileData[$tileIndex + $this->tileCount * $attribs] ? $this->tileData[$tileIndex + $this->tileCount * $attribs] : $this->updateImage($tileIndex, $attribs);
+        $im = $this->tileData[$tileIndex + $this->tileCount * $attribs] ?: $this->updateImage($tileIndex, $attribs);
         if ($im === true) {
             return;
         }
+
         $dst = $x + $y * 160;
         $src = $sourceLine * 8;
         $dstEnd = ($x > 152) ? (($y + 1) * 160) : ($dst + 8);
@@ @@
         }
     }

-    public function drawPartBgSprite($tileIndex, $x, $y, $sourceLine, $attribs)
+    public function drawPartBgSprite($tileIndex, $x, $y, $sourceLine, $attribs): void
     {
-        $im = $this->tileData[$tileIndex + $this->tileCount * $attribs] ? $this->tileData[$tileIndex + $this->tileCount * $attribs] : $this->updateImage($tileIndex, $attribs);
+        $im = $this->tileData[$tileIndex + $this->tileCount * $attribs] ?: $this->updateImage($tileIndex, $attribs);
         if ($im === true) {
             return;
         }
+
         $dst = $x + $y * 160;
         $src = $sourceLine * 8;
         $dstEnd = ($x > 152) ? (($y + 1) * 160) : ($dst + 8);
@@ @@
             $dst -= $x;
             $src -= $x;
         }
+
         while ($dst < $dstEnd) {
             //if ($im[$src] < 0 && $this->frameBuffer[$dst] >= 0) {
             $this->frameBuffer[$dst] = $im[$src];
@@ @@
                     if ($this->MBCRAMBanksEnabled || Settings::$overrideMBC) {
                         return $this->MBCRam[$address + $this->currMBCRAMBankPosition];
                     }
+
                     //cout("Reading from disabled RAM.", 1);
                     return 0xFF;
                 } else {
@@ @@
                             case 0x02:
                             case 0x03:
                                 return $this->MBCRam[$address + $this->currMBCRAMBankPosition];
-                                break;
                             case 0x08:
                                 return $this->latchedSeconds;
-                                break;
                             case 0x09:
                                 return $this->latchedMinutes;
-                                break;
                             case 0x0A:
                                 return $this->latchedHours;
-                                break;
                             case 0x0B:
                                 return $this->latchedLDays;
-                                break;
                             case 0x0C:
                                 return ((($this->RTCDayOverFlow) ? 0x80 : 0) + (($this->RTCHALT) ? 0x40 : 0)) + $this->latchedHDays;
                         }
                     }
+
                     //cout("Reading from invalid or disabled RAM.", 1);
                     return 0xFF;
                 }
@@ @@
         } elseif ($address >= 0xFF00) {
             switch ($address) {
                 case 0xFF00:
-                    return 0xC0 | $this->memory[0xFF00]; //Top nibble returns as set.
-                    break;
+                    return 0xC0 | $this->memory[0xFF00];
                 case 0xFF01:
                     return (($this->memory[0xFF02] & 0x1) == 0x1) ? 0xFF : $this->memory[0xFF01];
-                    break;
                 case 0xFF02:
                     if ($this->cGBC) {
                         return 0x7C | $this->memory[0xFF02];
@@ @@
                     } else {
                         return 0x7E | $this->memory[0xFF02];
                     }
-                    break;
                 case 0xFF07:
                     return 0xF8 | $this->memory[0xFF07];
-                    break;
                 case 0xFF0F:
                     return 0xE0 | $this->memory[0xFF0F];
-                    break;
                 case 0xFF10:
                     return 0x80 | $this->memory[0xFF10];
-                    break;
                 case 0xFF11:
                     return 0x3F | $this->memory[0xFF11];
-                    break;
                 case 0xFF14:
                     return 0xBF | $this->memory[0xFF14];
-                    break;
                 case 0xFF16:
                     return 0x3F | $this->memory[0xFF16];
-                    break;
                 case 0xFF19:
                     return 0xBF | $this->memory[0xFF19];
-                    break;
                 case 0xFF1A:
                     return 0x7F | $this->memory[0xFF1A];
-                    break;
                 case 0xFF1B:
+                case 0xFF20:
                     return 0xFF;
-                    break;
                 case 0xFF1C:
                     return 0x9F | $this->memory[0xFF1C];
-                    break;
                 case 0xFF1E:
                     return 0xBF | $this->memory[0xFF1E];
-                    break;
-                case 0xFF20:
-                    return 0xFF;
-                    break;
                 case 0xFF23:
                     return 0xBF | $this->memory[0xFF23];
-                    break;
                 case 0xFF26:
                     return 0x70 | $this->memory[0xFF26];
-                    break;
                 case 0xFF30:
                 case 0xFF31:
                 case 0xFF32:
@@ @@
                 case 0xFF3E:
                 case 0xFF3F:
                     return (($this->memory[0xFF26] & 0x4) == 0x4) ? 0xFF : $this->memory[$address];
-                    break;
                 case 0xFF41:
                     return 0x80 | $this->memory[0xFF41] | $this->lcdController->modeSTAT;
-                    break;
                 case 0xFF44:
                     return ($this->lcdController->LCDisOn) ? $this->memory[0xFF44] : 0;
-                    break;
                 case 0xFF4F:
                     return $this->currVRAMBank;
-                    break;
                 default:
                     //memoryReadNormal
                     return $this->memory[$address];
@@ @@
     public function VRAMReadGFX($address, $gbcBank)
     {
         //Graphics Side Reading The VRAM
-        return (!$gbcBank) ? $this->memory[0x8000 + $address] : $this->VRAM[$address];
+        return ($gbcBank) ? $this->VRAM[$address] : $this->memory[0x8000 + $address];
     }

-    public function setCurrentMBC1ROMBank()
+    public function setCurrentMBC1ROMBank(): void
     {
         //Read the cartridge ROM data from RAM memory:
-        switch ($this->ROMBank1offs) {
-            case 0x00:
-            case 0x20:
-            case 0x40:
-            case 0x60:
-                //Bank calls for 0x00, 0x20, 0x40, and 0x60 are really for 0x01, 0x21, 0x41, and 0x61.
-                $this->currentROMBank = $this->ROMBank1offs * 0x4000;
-                break;
-            default:
-                $this->currentROMBank = ($this->ROMBank1offs - 1) * 0x4000;
-        }
+        $this->currentROMBank = match ($this->ROMBank1offs) {
+            //Bank calls for 0x00, 0x20, 0x40, and 0x60 are really for 0x01, 0x21, 0x41, and 0x61.
+            0x00, 0x20, 0x40, 0x60 => $this->ROMBank1offs * 0x4000,
+            default => ($this->ROMBank1offs - 1) * 0x4000,
+        };
         while ($this->currentROMBank + 0x4000 >= count($this->ROM)) {
             $this->currentROMBank -= count($this->ROM);
         }
     }

-    public function setCurrentMBC2AND3ROMBank()
+    public function setCurrentMBC2AND3ROMBank(): void
     {
         //Read the cartridge ROM data from RAM memory:
         //Only map bank 0 to bank 1 here (MBC2 is like MBC1, but can only do 16 banks, so only the bank 0 quirk appears for MBC2):
@@ @@
             $this->currentROMBank -= count($this->ROM);
         }
     }
-    public function setCurrentMBC5ROMBank()
+
+    public function setCurrentMBC5ROMBank(): void
     {
         //Read the cartridge ROM data from RAM memory:
         $this->currentROMBank = ($this->ROMBank1offs - 1) * 0x4000;
@@ @@
     }

     //Memory Writing:
-    public function memoryWrite($address, $data)
+    public function memoryWrite($address, ?string $data): void
     {
         if ($address < 0x8000) {
             if ($this->cMBC1) {
@@ @@
                         //MBC3 RAM bank switching
                         $this->currMBCRAMBankPosition = ($this->currMBCRAMBank << 13) -   0xA000;
                     }
-                } else {
+                } elseif ($data == 0) {
                     //MBC3WriteRTCLatch
-                    if ($data == 0) {
-                        $this->RTCisLatched = false;
-                    } elseif (!$this->RTCisLatched) {
-                        //Copy over the current RTC time for reading.
-                        $this->RTCisLatched = true;
-                        $this->latchedSeconds = floor($this->RTCSeconds);
-                        $this->latchedMinutes = $this->RTCMinutes;
-                        $this->latchedHours = $this->RTCHours;
-                        $this->latchedLDays = ($this->RTCDays & 0xFF);
-                        $this->latchedHDays = $this->RTCDays >> 8;
-                    }
+                    $this->RTCisLatched = false;
+                } elseif (!$this->RTCisLatched) {
+                    //Copy over the current RTC time for reading.
+                    $this->RTCisLatched = true;
+                    $this->latchedSeconds = floor($this->RTCSeconds);
+                    $this->latchedMinutes = $this->RTCMinutes;
+                    $this->latchedHours = $this->RTCHours;
+                    $this->latchedLDays = ($this->RTCDays & 0xFF);
+                    $this->latchedHDays = $this->RTCDays >> 8;
                 }
             } elseif ($this->cMBC5 || $this->cRUMBLE) {
                 if ($address < 0x2000) {
@@ @@
                             $this->tileData[$r] = null;
                             $r -= $this->tileCount;
                         } while ($r >= 0);
+
                         $this->tileReadState[$tileIndex] = 0;
                     }
                 }
+
                 if ($this->currVRAMBank == 0) {
                     $this->memory[$address] = $data;
                 } else {
@@ @@
                     if ($this->MBCRAMBanksEnabled || Settings::$overrideMBC) {
                         $this->MBCRam[$address + $this->currMBCRAMBankPosition] = $data;
                     }
-                } else {
+                } elseif ($this->MBCRAMBanksEnabled || Settings::$overrideMBC) {
                     //MBC3 RTC + RAM:
                     //memoryWriteMBC3RAM
-                    if ($this->MBCRAMBanksEnabled || Settings::$overrideMBC) {
-                        switch ($this->currMBCRAMBank) {
-                            case 0x00:
-                            case 0x01:
-                            case 0x02:
-                            case 0x03:
-                                $this->MBCRam[$address + $this->currMBCRAMBankPosition] = $data;
-                                break;
-                            case 0x08:
-                                if ($data < 60) {
-                                    $this->RTCSeconds = $data;
-                                } else {
-                                    echo '(Bank #'.$this->currMBCRAMBank.') RTC write out of range: '.$data.PHP_EOL;
-                                }
-                                break;
-                            case 0x09:
-                                if ($data < 60) {
-                                    $this->RTCMinutes = $data;
-                                } else {
-                                    echo '(Bank #'.$this->currMBCRAMBank.') RTC write out of range: '.$data.PHP_EOL;
-                                }
-                                break;
-                            case 0x0A:
-                                if ($data < 24) {
-                                    $this->RTCHours = $data;
-                                } else {
-                                    echo '(Bank #'.$this->currMBCRAMBank.') RTC write out of range: '.$data.PHP_EOL;
-                                }
-                                break;
-                            case 0x0B:
-                                $this->RTCDays = ($data & 0xFF) | ($this->RTCDays & 0x100);
-                                break;
-                            case 0x0C:
-                                $this->RTCDayOverFlow = ($data & 0x80) == 0x80;
-                                $this->RTCHalt = ($data & 0x40) == 0x40;
-                                $this->RTCDays = (($data & 0x1) << 8) | ($this->RTCDays & 0xFF);
-                                break;
-                            default:
-                                echo 'Invalid MBC3 bank address selected: '.$this->currMBCRAMBank.PHP_EOL;
-                        }
+                    switch ($this->currMBCRAMBank) {
+                        case 0x00:
+                        case 0x01:
+                        case 0x02:
+                        case 0x03:
+                            $this->MBCRam[$address + $this->currMBCRAMBankPosition] = $data;
+                            break;
+                        case 0x08:
+                            if ($data < 60) {
+                                $this->RTCSeconds = $data;
+                            } else {
+                                echo '(Bank #'.$this->currMBCRAMBank.') RTC write out of range: '.$data.PHP_EOL;
+                            }
+
+                            break;
+                        case 0x09:
+                            if ($data < 60) {
+                                $this->RTCMinutes = $data;
+                            } else {
+                                echo '(Bank #'.$this->currMBCRAMBank.') RTC write out of range: '.$data.PHP_EOL;
+                            }
+
+                            break;
+                        case 0x0A:
+                            if ($data < 24) {
+                                $this->RTCHours = $data;
+                            } else {
+                                echo '(Bank #'.$this->currMBCRAMBank.') RTC write out of range: '.$data.PHP_EOL;
+                            }
+
+                            break;
+                        case 0x0B:
+                            $this->RTCDays = ($data & 0xFF) | ($this->RTCDays & 0x100);
+                            break;
+                        case 0x0C:
+                            $this->RTCDayOverFlow = ($data & 0x80) == 0x80;
+                            $this->RTCHalt = ($data & 0x40) == 0x40;
+                            $this->RTCDays = (($data & 0x1) << 8) | ($this->RTCDays & 0xFF);
+                            break;
+                        default:
+                            echo 'Invalid MBC3 bank address selected: '.$this->currMBCRAMBank.PHP_EOL;
                     }
                 }
             } else {
@@ @@
             } else {
                 //We might have encountered illegal RAM writing or such, so just do nothing...
             }
+
         //I/O Registers (GB + GBC):
         } elseif ($address == 0xFF00) {
             $this->memory[0xFF00] = ($data & 0x30) | (((($data & 0x20) == 0) ? ($this->JoyPad >> 4) : 0xF) & ((($data & 0x10) == 0) ? ($this->JoyPad & 0xF) : 0xF));
@@ @@
         } elseif ($address == 0xFF07) {
             $this->memory[0xFF07] = $data & 0x07;
             $this->TIMAEnabled = ($data & 0x04) == 0x04;
-            $this->TACClocker = pow(4, (($data & 0x3) != 0) ? ($data & 0x3) : 4); //TODO: Find a way to not make a conditional in here...
+            $this->TACClocker = 4 ** (($data & 0x3) != 0) ? ($data & 0x3) : 4; //TODO: Find a way to not make a conditional in here...
         } elseif ($address == 0xFF40) {
             if ($this->cGBC) {
                 $temp_var = ($data & 0x80) == 0x80;
@@ @@
                     } else {
                         $this->displayShowOff();
                     }
+
                     $this->memory[0xFF0F] &= 0xFD;
                 }
+
                 $this->gfxWindowY = ($data & 0x40) == 0x40;
                 $this->gfxWindowDisplay = ($data & 0x20) == 0x20;
                 $this->gfxBackgroundX = ($data & 0x10) == 0x10;
@@ @@
                     } else {
                         $this->displayShowOff();
                     }
+
                     $this->memory[0xFF0F] &= 0xFD;
                 }
+
                 $this->gfxWindowY = ($data & 0x40) == 0x40;
                 $this->gfxWindowDisplay = ($data & 0x20) == 0x20;
                 $this->gfxBackgroundX = ($data & 0x10) == 0x10;
@@ @@
                 } else {
                     $this->bgEnabled = true;
                 }
+
                 $this->memory[0xFF40] = $data;
             }
         } elseif ($address == 0xFF41) {
@@ @@
                 $this->invalidateAll(2);
             }
         } elseif ($address == 0xFF4D) {
-            if ($this->cGBC) {
-                $this->memory[0xFF4D] = ($data & 0x7F) + ($this->memory[0xFF4D] & 0x80);
-            } else {
-                $this->memory[0xFF4D] = $data;
-            }
+            $this->memory[0xFF4D] = $this->cGBC ? ($data & 0x7F) + ($this->memory[0xFF4D] & 0x80) : $data;
         } elseif ($address == 0xFF4F) {
             if ($this->cGBC) {
                 $this->currVRAMBank = $data & 0x01;
@@ @@
                 $this->memory[0xFF50] = $data; //Bits are sustained in memory?
             }
         } elseif ($address == 0xFF51) {
-            if ($this->cGBC) {
-                if (!$this->hdmaRunning) {
-                    $this->memory[0xFF51] = $data;
-                }
+            if ($this->cGBC && !$this->hdmaRunning) {
+                $this->memory[0xFF51] = $data;
             }
         } elseif ($address == 0xFF52) {
-            if ($this->cGBC) {
-                if (!$this->hdmaRunning) {
-                    $this->memory[0xFF52] = $data & 0xF0;
-                }
+            if ($this->cGBC && !$this->hdmaRunning) {
+                $this->memory[0xFF52] = $data & 0xF0;
             }
         } elseif ($address == 0xFF53) {
-            if ($this->cGBC) {
-                if (!$this->hdmaRunning) {
-                    $this->memory[0xFF53] = $data & 0x1F;
-                }
+            if ($this->cGBC && !$this->hdmaRunning) {
+                $this->memory[0xFF53] = $data & 0x1F;
             }
         } elseif ($address == 0xFF54) {
-            if ($this->cGBC) {
-                if (!$this->hdmaRunning) {
-                    $this->memory[0xFF54] = $data & 0xF0;
-                }
+            if ($this->cGBC && !$this->hdmaRunning) {
+                $this->memory[0xFF54] = $data & 0xF0;
             }
         } elseif ($address == 0xFF55) {
             if ($this->cGBC) {
@@ @@
                         for ($loopAmount = 0; $loopAmount < $endAmount; ++$loopAmount) {
                             $this->memoryWrite($dmaDst++, $this->memoryRead($dmaSrc++));
                         }
+
                         $this->memory[0xFF51] = (($dmaSrc & 0xFF00) >> 8);
                         $this->memory[0xFF52] = ($dmaSrc & 0x00F0);
                         $this->memory[0xFF53] = (($dmaDst & 0x1F00) >> 8);
                         $this->memory[0xFF54] = ($dmaDst & 0x00F0);
-                        $this->memory[0xFF55] = 0xFF; //Transfer completed.
+                        $this->memory[0xFF55] = 0xFF;
+                        //Transfer completed.
+                    } elseif ($data > 0x80) {
+                        //H-Blank DMA
+                        $this->hdmaRunning = true;
+                        $this->memory[0xFF55] = $data & 0x7F;
                     } else {
-                        //H-Blank DMA
-                        if ($data > 0x80) {
-                            $this->hdmaRunning = true;
-                            $this->memory[0xFF55] = $data & 0x7F;
-                        } else {
-                            $this->memory[0xFF55] = 0xFF;
-                        }
+                        $this->memory[0xFF55] = 0xFF;
                     }
                 } elseif (($data & 0x80) == 0) {
                     //Stop H-Blank DMA
@@ @@
                     $this->cGBC = ($data == 0x80);
                     echo 'Booted to GBC Mode: '.$this->cGBC.PHP_EOL;
                 }
+
                 $this->memory[0xFF6C] = $data;
             }
         } elseif ($address == 0xFF70) {
@@ @@
                     $this->gbcRamBankPosition = (($this->gbcRamBank - 1) * 0x1000) - 0xD000;
                     $this->gbcRamBankPositionECHO = (($this->gbcRamBank - 1) * 0x1000) - 0xF000;
                 }
+
                 $this->memory[0xFF70] = ($data | 0x40); //Bit 6 cannot be written to.
             } else {
                 $this->memory[0xFF70] = $data;
@@ @@
         return $ubyte; //If this function is called, no wrapping requested.
     }

-    public function nswtuw($uword)
+    public function nswtuw($uword): int
     {
         //Keep an unsigned word unsigned:
         if ($uword < 0) {
@@ @@
     {
         try {
             $typedArrayTemp = ($bit32) ? (($unsigned) ? new Uint32Array(count($baseArray)) : new Int32Array(count($baseArray))) : new Uint8Array(count($baseArray));
-            for ($address = 0; $address < count($baseArray); ++$address) {
+            $counter = count($baseArray);
+            for ($address = 0; $address < $counter; ++$address) {
                 $typedArrayTemp[$address] = $baseArray[$address];
             }

             return $typedArrayTemp;
-        } catch (\Exception $error) {
+        } catch (Exception) {
             echo 'Could not convert an array to a typed array'.PHP_EOL;

             return $baseArray;
@@ @@
     {
         try {
             $arrayTemp = array_fill(0, count($baseArray), 0);
-            for ($address = 0; $address < count($baseArray); ++$address) {
+            $counter = count($baseArray);
+            for ($address = 0; $address < $counter; ++$address) {
                 $arrayTemp[$address] = $baseArray[$address];
             }

             return $arrayTemp;
-        } catch (\Exception $error) {
+        } catch (Exception) {
             return $baseArray;
         }
     }

-    public function getTypedArray($length, $defaultValue, $numberType)
+    /**
+     * @return mixed[]
+     */
+    public function getTypedArray($length, $defaultValue, $numberType): array
     {
         // @PHP - We dont have typed arrays and unsigned int in PHP
         // This function just creates an array and initialize with a value
@@ @@
         return $arrayHandle;
     }

-    public function arrayPad($length, $defaultValue)
+    public function arrayPad($length, $defaultValue): array
     {
-        $arrayHandle = array_fill(0, $length, $defaultValue);
-
-        return $arrayHandle;
+        return array_fill(0, $length, $defaultValue);
     }
 }
    ----------- end diff -----------

Applied rules:
 * CombinedAssignRector
 * CompleteDynamicPropertiesRector
 * UseIdenticalOverEqualWithSameTypeRector
 * ForRepeatedCountToOwnVariableRector
 * SimplifyUselessVariableRector
 * CombineIfRector
 * CompleteMissingIfElseBracketRector
 * ShortenElseIfRector
 * SimplifyIfElseToTernaryRector
 * SwitchNegatedTernaryRector
 * UnnecessaryTernaryExpressionRector
 * SplitDoubleAssignRector
 * CatchExceptionNameMatchingTypeRector
 * NewlineAfterStatementRector
 * RemoveNullPropertyInitializationRector
 * RemoveUnreachableStatementRector
 * RemoveDuplicatedCaseInSwitchRector
 * TernaryToElvisRector
 * PowToExpRector
 * RemoveUnusedVariableInCatchRector
 * ClassPropertyAssignToConstructorPromotionRector
 * ChangeSwitchToMatchRector
 * NullToStrictStringFuncCallArgRector
 * AddVoidReturnTypeWhereNoReturnRector
 * BoolReturnTypeFromBooleanStrictReturnsRector
 * NumericReturnTypeFromStrictReturnsRector
 * ReturnTypeFromReturnDirectArrayRector
 * ReturnTypeFromStrictNewArrayRector
 * ReturnTypeFromStrictTypedCallRector
 * StrictStringParamConcatRector
 * TypedPropertyFromStrictConstructorRector


4) src/Keyboard.php:3

    ---------- begin diff ----------
@@ @@

 class Keyboard
 {
+    /**
+     * @var Core
+     */
     public $core;
+
     public $file;
-    public $keyPressing = null;
+
+    public $keyPressing;
+
     public $started = false;

     public function __construct(Core $core)
@@ @@
         stream_set_blocking($this->file, false);
     }

-    public function check()
+    public function check(): void
     {
         $key = fread($this->file, 1);

-        if (!empty($key)) {
+        if (!($key === '' || $key === '0' || $key === false)) {
             $this->keyDown($key);
         } elseif (!empty($this->keyPressing)) {
             $this->keyUp($this->keyPressing);
@@ @@
         $this->keyPressing = $key;
     }

-    public function matchKey($key)
+    public function matchKey($key): int|string
     {
         //Maps a keyboard key to a gameboy key.
         //Order: Right, Left, Up, Down, A, B, Select, Start

-        $keyIndex = array_search($key, Settings::$keyboardButtonMap);
+        $keyIndex = array_search($key, Settings::$keyboardButtonMap, true);

         if ($keyIndex === false) {
             return -1;
@@ @@
         return $keyIndex;
     }

-    public function keyDown($key)
+    public function keyDown($key): void
     {
         $keyCode = $this->matchKey($key);

@@ @@
         }
     }

-    public function keyUp($key)
+    public function keyUp($key): void
     {
         $keyCode = $this->matchKey($key);
    ----------- end diff -----------

Applied rules:
 * StrictArraySearchRector
 * NewlineAfterStatementRector
 * RemoveNullPropertyInitializationRector
 * DisallowedEmptyRuleFixerRector
 * AddVoidReturnTypeWhereNoReturnRector
 * ReturnUnionTypeRector
 * TypedPropertyFromStrictConstructorRector


5) src/LcdController.php:6

    ---------- begin diff ----------
@@ @@
     //Actual scan line...
     public $actualScanLine = 0;

-    protected $core;
-
     //Is the emulated LCD controller on?
     public $LCDisOn = false;

@@ @@
     //Tracker for STAT triggering.
     public $STATTracker = 0;

-    public function __construct($core)
+    public function __construct(protected $core)
     {
-        $this->core = $core;
     }

-    public function matchLYC()
+    public function matchLYC(): void
     {
         // LY - LYC Compare
         // If LY==LCY
@@ @@
         }
     }

-    public function notifyScanline()
+    public function notifyScanline(): void
     {
         if ($this->actualScanLine == 0) {
             $this->core->windowSourceLine = 0;
         }
+
         // determine the left edge of the window (160 if window is inactive)
         $windowLeft = ($this->core->gfxWindowDisplay && $this->core->memory[0xFF4A] <= $this->actualScanLine) ? min(160, $this->core->memory[0xFF4B] - 7) : 160;
         // step 1: background+window
@@ @@
         if ($skippedAnything) {
             $this->core->drawBackgroundForLine($this->actualScanLine, $windowLeft, 0x80);
         }
+
         if ($windowLeft < 160) {
             ++$this->core->windowSourceLine;
         }
@@ @@
      * Scan Line and STAT Mode Control
      * @param  int $line Memory Scanline
      */
-    public function scanLine($line)
+    public function scanLine($line): void
     {
         //When turned off = Do nothing!
         if ($this->LCDisOn) {
@@ @@
                         if ($this->core->hdmaRunning && !$this->core->halt && $this->LCDisOn) {
                             $this->core->performHdma(); //H-Blank DMA
                         }
+
                         if ($this->mode0TriggerSTAT) {
                             $this->core->memory[0xFF0F] |= 0x2; // set IF bit 1
                         }
                     }
+
                     $this->STATTracker = 0;
                     $this->scanLineMode2(); // mode2: 80 cycles
                     if ($this->core->LCDTicks >= 114) {
@@ @@
                     if ($this->mode1TriggerSTAT) {
                         $this->core->memory[0xFF0F] |= 0x2; // set IF bit 1
                     }
+
                     if ($this->STATTracker != 2) {
                         if ($this->core->hdmaRunning && !$this->core->halt && $this->LCDisOn) {
                             $this->core->performHdma(); //H-Blank DMA
                         }
+
                         if ($this->mode0TriggerSTAT) {
                             $this->core->memory[0xFF0F] |= 0x2; // set IF bit 1
                         }
                     }
+
                     $this->STATTracker = 0;
                     $this->modeSTAT = 1;
                     $this->core->memory[0xFF0F] |= 0x1; // set IF flag 0
@@ @@
                     if ($this->core->drewBlank > 0) {
                         --$this->core->drewBlank;
                     }
+
                     if ($this->core->LCDTicks >= 114) {
                         //We need to skip 1 or more scan lines:
                         $this->scanLine($this->actualScanLine); //Scan Line and STAT Mode Control
@@ @@
                     $this->core->memory[0xFF44] = 0; //LY register resets to 0 early.
                     $this->matchLYC(); //LY==LYC Test is early here (Fixes specific one-line glitches (example: Kirby2 intro)).
                 }
+
                 if ($this->core->LCDTicks >= 114) {
                     //We reset back to the beginning:
                     $this->core->LCDTicks -= 114;
@@ @@
         }
     }

-    public function scanLineMode0()
+    public function scanLineMode0(): void
     {
         // H-Blank
         if ($this->modeSTAT != 0) {
@@ @@
             if ($this->core->hdmaRunning && !$this->core->halt && $this->LCDisOn) {
                 $this->performHdma(); //H-Blank DMA
             }
+
             if ($this->mode0TriggerSTAT || ($this->mode2TriggerSTAT && $this->STATTracker == 0)) {
                 $this->core->memory[0xFF0F] |= 0x2; // if STAT bit 3 -> set IF bit1
             }
+
             $this->notifyScanline();
             $this->STATTracker = 2;
             $this->modeSTAT = 0;
@@ @@
         }
     }

-    public function scanLineMode2()
+    public function scanLineMode2(): void
     {
         // OAM in use
         if ($this->modeSTAT != 2) {
@@ @@
             if ($this->mode2TriggerSTAT) {
                 $this->core->memory[0xFF0F] |= 0x2; // set IF bit 1
             }
+
             $this->STATTracker = 1;
             $this->modeSTAT = 2;
         }
     }

-    public function scanLineMode3()
+    public function scanLineMode3(): void
     {
         // OAM in use
         if ($this->modeSTAT != 3) {
@@ @@
             if ($this->mode2TriggerSTAT && $this->STATTracker == 0) {
                 $this->core->memory[0xFF0F] |= 0x2; // set IF bit 1
             }
+
             $this->STATTracker = 1;
             $this->modeSTAT = 3;
         }
    ----------- end diff -----------

Applied rules:
 * NewlineAfterStatementRector
 * ClassPropertyAssignToConstructorPromotionRector
 * AddVoidReturnTypeWhereNoReturnRector


6) src/Opcode.php:8

    ---------- begin diff ----------
@@ @@
     /**
      * Run the given opcode.
      *
-     * @param Core $core
      * @param int $address
      * @return mixed
      */
@@ @@
      * Opcode #0x00.
      *
      * NOP
-     *
-     * @param Core $core
      */
-    public static function opcode0(Core $core)
+    public static function opcode0(Core $core): void
     {
         // Do Nothing...
     }
@@ @@
      * Opcode #0x01.
      *
      * LD BC, nn
-     *
-     * @param Core $core
      */
-    public static function opcode1(Core $core)
+    public static function opcode1(Core $core): void
     {
         $core->registerC = $core->memoryRead($core->programCounter);
         $core->registerB = $core->memoryRead(($core->programCounter + 1) & 0xFFFF);
@@ @@
      * Opcode #0x02.
      *
      * LD (BC), A
-     *
-     * @param Core $core
      */
-    public static function opcode2(Core $core)
+    public static function opcode2(Core $core): void
     {
         $core->memoryWrite(($core->registerB << 8) + $core->registerC, $core->registerA);
     }
@@ @@
      * Opcode #0x03.
      *
      * INC BC
-     *
-     * @param Core $core
      */
-    public static function opcode3(Core $core)
+    public static function opcode3(Core $core): void
     {
         $temp_var = ((($core->registerB << 8) + $core->registerC) + 1);
         $core->registerB = (($temp_var >> 8) & 0xFF);
@@ @@
      * Opcode #0x04.
      *
      * INC B
-     *
-     * @param Core $core
      */
-    public static function opcode4(Core $core)
+    public static function opcode4(Core $core): void
     {
         $core->registerB = (($core->registerB + 1) & 0xFF);
         $core->FZero = ($core->registerB == 0);
@@ @@
      * Opcode #0x05.
      *
      * DEC B
-     *
-     * @param Core $core
      */
-    public static function opcode5(Core $core)
+    public static function opcode5(Core $core): void
     {
         $core->registerB = $core->unsbtub($core->registerB - 1);
         $core->FZero = ($core->registerB == 0);
@@ @@
      * Opcode #0x06.
      *
      * LD B, n
-     *
-     * @param Core $core
      */
-    public static function opcode6(Core $core)
+    public static function opcode6(Core $core): void
     {
         $core->registerB = $core->memoryRead($core->programCounter);
         $core->programCounter = ($core->programCounter + 1) & 0xFFFF;
@@ @@
      * Opcode #0x07.
      *
      * RCLA
-     *
-     * @param Core $core
      */
-    public static function opcode7(Core $core)
+    public static function opcode7(Core $core): void
     {
         $core->FCarry = (($core->registerA & 0x80) == 0x80);
         $core->registerA = (($core->registerA << 1) & 0xFF) | ($core->registerA >> 7);
-        $core->FZero = $core->FSubtract = $core->FHalfCarry = false;
+        $core->FZero = false;
+        $core->FSubtract = false;
+        $core->FHalfCarry = false;
     }

     /**
@@ @@
      * Opcode #0x08
      *
      * LD (nn), SP
-     *
-     * @param Core $core
      */
-    public static function opcode8(Core $core)
+    public static function opcode8(Core $core): void
     {
         $temp_var = ($core->memoryRead(($core->programCounter + 1) & 0xFFFF) << 8) + $core->memoryRead($core->programCounter);
         $core->memoryWrite($temp_var, $core->stackPointer & 0xFF);
         $core->memoryWrite(($temp_var + 1) & 0xFFFF, $core->stackPointer >> 8);
+
         $core->programCounter = ($core->programCounter + 2) & 0xFFFF;
     }

@@ @@
      * Opcode #0x09.
      *
      * ADD HL, BC
-     *
-     * @param Core $core
      */
-    public static function opcode9(Core $core)
+    public static function opcode9(Core $core): void
     {
         $n2 = ($core->registerB << 8) + $core->registerC;
         $dirtySum = $core->registersHL + $n2;
@@ @@
      * Opcode #0x0A.
      *
      * LD A, (BC)
-     *
-     * @param Core $core
      */
-    public static function opcode10(Core $core)
+    public static function opcode10(Core $core): void
     {
         $core->registerA = $core->memoryRead(($core->registerB << 8) + $core->registerC);
     }
@@ @@
      * Opcode #0x0B.
      *
      * DEC BC
-     *
-     * @param Core $core
      */
-    public static function opcode11(Core $core)
+    public static function opcode11(Core $core): void
     {
         $temp_var = $core->unswtuw((($core->registerB << 8) + $core->registerC) - 1);
         $core->registerB = ($temp_var >> 8);
@@ @@
      * Opcode #0x0C
      *
      * INC C
-     *
-     * @param Core $core
      */
-    public static function opcode12(Core $core)
+    public static function opcode12(Core $core): void
     {
         $core->registerC = (($core->registerC + 1) & 0xFF);
         $core->FZero = ($core->registerC == 0);
@@ @@
      * Opcode #0x0D.
      *
      * DEC C
-     *
-     * @param Core $core
      */
-    public static function opcode13(Core $core)
+    public static function opcode13(Core $core): void
     {
         $core->registerC = $core->unsbtub($core->registerC - 1);
         $core->FZero = ($core->registerC == 0);
@@ @@
      * Opcode #0x0E.
      *
      * LD C, n
-     *
-     * @param Core $core
      */
-    public static function opcode14(Core $core)
+    public static function opcode14(Core $core): void
     {
         $core->registerC = $core->memoryRead($core->programCounter);
         $core->programCounter = ($core->programCounter + 1) & 0xFFFF;
@@ @@
      * Opcode #0x0F.
      *
      * RRCA
-     *
-     * @param Core $core
      */
-    public static function opcode15(Core $core)
+    public static function opcode15(Core $core): void
     {
         $core->FCarry = (($core->registerA & 1) == 1);
         $core->registerA = ($core->registerA >> 1) + (($core->registerA & 1) << 7);
-        $core->FZero = $core->FSubtract = $core->FHalfCarry = false;
+        $core->FZero = false;
+        $core->FSubtract = false;
+        $core->FHalfCarry = false;
     }

     /**
@@ @@
      * Opcode #0x10.
      *
      * STOP
-     *
-     * @param Core $core
      */
-    public static function opcode16(Core $core)
+    public static function opcode16(Core $core): void
     {
-        if ($core->cGBC) {
-            /*TODO: Emulate the speed switch delay:
-            Delay Amount:
-            16 ms when going to double-speed.
-            32 ms when going to single-speed.
-            Also, bits 4 and 5 of 0xFF00 should read as set (1), while the switch is in process.
-             */
-
-            // Speed change requested.
-            if (($core->memory[0xFF4D] & 0x01) == 0x01) {
-                //Go back to single speed mode.
-                if (($core->memory[0xFF4D] & 0x80) == 0x80) {
-                    // cout("Going into single clock speed mode.", 0);
-                    $core->multiplier = 1; //TODO: Move this into the delay done code.
-                    $core->memory[0xFF4D] &= 0x7F; //Clear the double speed mode flag.
-                    //Go to double speed mode.
-                } else {
-                    // cout("Going into double clock speed mode.", 0);
-                    $core->multiplier = 2; //TODO: Move this into the delay done code.
-                    $core->memory[0xFF4D] |= 0x80; //Set the double speed mode flag.
-                }
-                $core->memory[0xFF4D] &= 0xFE; //Reset the request bit.
+        /*TODO: Emulate the speed switch delay:
+          Delay Amount:
+          16 ms when going to double-speed.
+          32 ms when going to single-speed.
+          Also, bits 4 and 5 of 0xFF00 should read as set (1), while the switch is in process.
+           */
+        // Speed change requested.
+        if ($core->cGBC && ($core->memory[0xFF4D] & 0x01) == 0x01) {
+            //Go back to single speed mode.
+            if (($core->memory[0xFF4D] & 0x80) == 0x80) {
+                // cout("Going into single clock speed mode.", 0);
+                $core->multiplier = 1; //TODO: Move this into the delay done code.
+                $core->memory[0xFF4D] &= 0x7F; //Clear the double speed mode flag.
+                //Go to double speed mode.
+            } else {
+                // cout("Going into double clock speed mode.", 0);
+                $core->multiplier = 2; //TODO: Move this into the delay done code.
+                $core->memory[0xFF4D] |= 0x80; //Set the double speed mode flag.
             }
+            
+            $core->memory[0xFF4D] &= 0xFE;
+            //Reset the request bit.
         }
     }

@@ @@
      * Opcode #0x11.
      *
      * LD DE, nn
-     *
-     * @param Core $core
      */
-    public static function opcode17(Core $core)
+    public static function opcode17(Core $core): void
     {
         $core->registerE = $core->memoryRead($core->programCounter);
         $core->registerD = $core->memoryRead(($core->programCounter + 1) & 0xFFFF);
@@ @@
      * Opcode #0x12.
      *
      * LD (DE), A
-     *
-     * @param Core $core
      */
-    public static function opcode18(Core $core)
+    public static function opcode18(Core $core): void
     {
         $core->memoryWrite(($core->registerD << 8) + $core->registerE, $core->registerA);
     }
@@ @@
      * Opcode #0x13.
      *
      * INC DE
-     *
-     * @param Core $core
      */
-    public static function opcode19(Core $core)
+    public static function opcode19(Core $core): void
     {
         $temp_var = ((($core->registerD << 8) + $core->registerE) + 1);
         $core->registerD = (($temp_var >> 8) & 0xFF);
@@ @@
      * Opcode #0x14.
      *
      * INC D
-     *
-     * @param Core $core
      */
-    public static function opcode20(Core $core)
+    public static function opcode20(Core $core): void
     {
         $core->registerD = (($core->registerD + 1) & 0xFF);
         $core->FZero = ($core->registerD == 0);
@@ @@
      * Opcode #0x15.
      *
      * DEC D
-     *
-     * @param Core $core
      */
-    public static function opcode21(Core $core)
+    public static function opcode21(Core $core): void
     {
         $core->registerD = $core->unsbtub($core->registerD - 1);
         $core->FZero = ($core->registerD == 0);
@@ @@
      * Opcode #0x16.
      *
      * LD D, n
-     *
-     * @param Core $core
      */
-    public static function opcode22(Core $core)
+    public static function opcode22(Core $core): void
     {
         $core->registerD = $core->memoryRead($core->programCounter);
         $core->programCounter = ($core->programCounter + 1) & 0xFFFF;
@@ @@
      * Opcode #0x17.
      *
      * RLA
-     *
-     * @param Core $core
      */
-    public static function opcode23(Core $core)
+    public static function opcode23(Core $core): void
     {
         $carry_flag = ($core->FCarry) ? 1 : 0;
         $core->FCarry = (($core->registerA & 0x80) == 0x80);
         $core->registerA = (($core->registerA << 1) & 0xFF) | $carry_flag;
-        $core->FZero = $core->FSubtract = $core->FHalfCarry = false;
+        $core->FZero = false;
+        $core->FSubtract = false;
+        $core->FHalfCarry = false;
     }

     /**
@@ @@
      * Opcode #0x18.
      *
      * JR n
-     *
-     * @param Core $core
      */
-    public static function opcode24(Core $core)
+    public static function opcode24(Core $core): void
     {
         $core->programCounter = $core->nswtuw($core->programCounter + $core->usbtsb($core->memoryRead($core->programCounter)) + 1);
     }
@@ @@
      * Opcode #0x19.
      *
      * ADD HL, DE
-     *
-     * @param Core $core
      */
-    public static function opcode25(Core $core)
+    public static function opcode25(Core $core): void
     {
         $n2 = ($core->registerD << 8) + $core->registerE;
         $dirtySum = $core->registersHL + $n2;
@@ @@
      * Opcode #0x1A.
      *
      * LD A, (DE)
-     *
-     * @param Core $core
      */
-    public static function opcode26(Core $core)
+    public static function opcode26(Core $core): void
     {
         $core->registerA = $core->memoryRead(($core->registerD << 8) + $core->registerE);
     }
@@ @@
      * Opcode #0x1B.
      *
      * DEC DE
-     *
-     * @param Core $core
      */
-    public static function opcode27(Core $core)
+    public static function opcode27(Core $core): void
     {
         $temp_var = $core->unswtuw((($core->registerD << 8) + $core->registerE) - 1);
         $core->registerD = ($temp_var >> 8);
@@ @@
      * Opcode #0x1C.
      *
      * INC E
-     *
-     * @param Core $core
      */
-    public static function opcode28(Core $core)
+    public static function opcode28(Core $core): void
     {
         $core->registerE = (($core->registerE + 1) & 0xFF);
         $core->FZero = ($core->registerE == 0);
@@ @@
      * Opcode #0x1D.
      *
      * DEC E
-     *
-     * @param Core $core
      */
-    public static function opcode29(Core $core)
+    public static function opcode29(Core $core): void
     {
         $core->registerE = $core->unsbtub($core->registerE - 1);
         $core->FZero = ($core->registerE == 0);
@@ @@
      * Opcode #0x1E.
      *
      * LD E, n
-     *
-     * @param Core $core
      */
-    public static function opcode30(Core $core)
+    public static function opcode30(Core $core): void
     {
         $core->registerE = $core->memoryRead($core->programCounter);
         $core->programCounter = ($core->programCounter + 1) & 0xFFFF;
@@ @@
      * Opcode #0x1F.
      *
      * RRA
-     *
-     * @param Core $core
      */
-    public static function opcode31(Core $core)
+    public static function opcode31(Core $core): void
     {
         $carry_flag = ($core->FCarry) ? 0x80 : 0;
         $core->FCarry = (($core->registerA & 1) == 1);
         $core->registerA = ($core->registerA >> 1) + $carry_flag;
-        $core->FZero = $core->FSubtract = $core->FHalfCarry = false;
+        $core->FZero = false;
+        $core->FSubtract = false;
+        $core->FHalfCarry = false;
     }

     /**
@@ @@
      * Opcode #0x20.
      *
      * JR cc, n
-     *
-     * @param Core $core
      */
-    public static function opcode32(Core $core)
+    public static function opcode32(Core $core): void
     {
         if (!$core->FZero) {
             $core->programCounter = $core->nswtuw($core->programCounter + $core->usbtsb($core->memoryRead($core->programCounter)) + 1);
@@ @@
      * Opcode #0x21.
      *
      * LD HL, nn
-     *
-     * @param Core $core
      */
-    public static function opcode33(Core $core)
+    public static function opcode33(Core $core): void
     {
         $core->registersHL = ($core->memoryRead(($core->programCounter + 1) & 0xFFFF) << 8) + $core->memoryRead($core->programCounter);
         $core->programCounter = ($core->programCounter + 2) & 0xFFFF;
@@ @@
      * Opcode #0x22.
      *
      * LDI (HL), A
-     *
-     * @param Core $core
      */
-    public static function opcode34(Core $core)
+    public static function opcode34(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->registerA);
         $core->registersHL = (($core->registersHL + 1) & 0xFFFF);
@@ @@
      * Opcode #0x23.
      *
      * INC HL
-     *
-     * @param Core $core
      */
-    public static function opcode35(Core $core)
+    public static function opcode35(Core $core): void
     {
         $core->registersHL = (($core->registersHL + 1) & 0xFFFF);
     }
@@ @@
      * Opcode #0x24.
      *
      * INC H
-     *
-     * @param Core $core
      */
-    public static function opcode36(Core $core)
+    public static function opcode36(Core $core): void
     {
         $H = ((($core->registersHL >> 8) + 1) & 0xFF);
         $core->FZero = ($H == 0);
@@ @@
      * Opcode #0x25.
      *
      * DEC H
-     *
-     * @param Core $core
      */
-    public static function opcode37(Core $core)
+    public static function opcode37(Core $core): void
     {
         $H = $core->unsbtub(($core->registersHL >> 8) - 1);
         $core->FZero = ($H == 0);
@@ @@
      * Opcode #0x26.
      *
      * LD H, n
-     *
-     * @param Core $core
      */
-    public static function opcode38(Core $core)
+    public static function opcode38(Core $core): void
     {
         $core->registersHL = ($core->memoryRead($core->programCounter) << 8) + ($core->registersHL & 0xFF);
         $core->programCounter = ($core->programCounter + 1) & 0xFFFF;
@@ @@
      * Opcode #0x27.
      *
      * DAA
-     *
-     * @param Core $core
      */
-    public static function opcode39(Core $core)
+    public static function opcode39(Core $core): void
     {
         $temp_var = $core->registerA;
         if ($core->FCarry) {
             $temp_var |= 0x100;
         }
+
         if ($core->FHalfCarry) {
             $temp_var |= 0x200;
         }
+
         if ($core->FSubtract) {
             $temp_var |= 0x400;
         }
+
         $core->registerA = ($temp_var = $core->DAATable[$temp_var]) >> 8;
         $core->FZero = (($temp_var & 0x80) == 0x80);
         $core->FSubtract = (($temp_var & 0x40) == 0x40);
@@ @@
      * Opcode #0x28.
      *
      * JR cc, n
-     *
-     * @param Core $core
      */
-    public static function opcode40(Core $core)
+    public static function opcode40(Core $core): void
     {
         if ($core->FZero) {
             $core->programCounter = $core->nswtuw($core->programCounter + $core->usbtsb($core->memoryRead($core->programCounter)) + 1);
@@ @@
      * Opcode #0x29.
      *
      * ADD HL, HL
-     *
-     * @param Core $core
      */
-    public static function opcode41(Core $core)
+    public static function opcode41(Core $core): void
     {
         ;
         $core->FHalfCarry = (($core->registersHL & 0xFFF) > 0x7FF);
@@ @@
      * Opcode #0x2A.
      *
      * LDI A, (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode42(Core $core)
+    public static function opcode42(Core $core): void
     {
         $core->registerA = $core->memoryRead($core->registersHL);
         $core->registersHL = (($core->registersHL + 1) & 0xFFFF);
@@ @@
      * Opcode #0x2B.
      *
      * DEC HL
-     *
-     * @param Core $core
      */
-    public static function opcode43(Core $core)
+    public static function opcode43(Core $core): void
     {
         $core->registersHL = $core->unswtuw($core->registersHL - 1);
     }
@@ @@
      * Opcode #0x2C.
      *
      * INC L
-     *
-     * @param Core $core
      */
-    public static function opcode44(Core $core)
+    public static function opcode44(Core $core): void
     {
         $L = (($core->registersHL + 1) & 0xFF);
         $core->FZero = ($L == 0);
@@ @@
      * Opcode #0x2D.
      *
      * DEC L
-     *
-     * @param Core $core
      */
-    public static function opcode45(Core $core)
+    public static function opcode45(Core $core): void
     {
         $L = $core->unsbtub(($core->registersHL & 0xFF) - 1);
         $core->FZero = ($L == 0);
@@ @@
      * Opcode #0x2E.
      *
      * LD L, n
-     *
-     * @param Core $core
      */
-    public static function opcode46(Core $core)
+    public static function opcode46(Core $core): void
     {
         $core->registersHL = ($core->registersHL & 0xFF00) + $core->memoryRead($core->programCounter);
         $core->programCounter = ($core->programCounter + 1) & 0xFFFF;
@@ @@
      * Opcode #0x2F.
      *
      * CPL
-     *
-     * @param Core $core
      */
-    public static function opcode47(Core $core)
+    public static function opcode47(Core $core): void
     {
         $core->registerA ^= 0xFF;
-        $core->FSubtract = $core->FHalfCarry = true;
+        $core->FSubtract = true;
+        $core->FHalfCarry = true;
     }

     /**
@@ @@
      * Opcode #0x30.
      *
      * JR cc, n
-     *
-     * @param Core $core
      */
-    public static function opcode48(Core $core)
+    public static function opcode48(Core $core): void
     {
         if (!$core->FCarry) {
             $core->programCounter = $core->nswtuw($core->programCounter + $core->usbtsb($core->memoryRead($core->programCounter)) + 1);
@@ @@
      * Opcode #0x31.
      *
      * LD SP, nn
-     *
-     * @param Core $core
      */
-    public static function opcode49(Core $core)
+    public static function opcode49(Core $core): void
     {
         $core->stackPointer = ($core->memoryRead(($core->programCounter + 1) & 0xFFFF) << 8) + $core->memoryRead($core->programCounter);
         $core->programCounter = ($core->programCounter + 2) & 0xFFFF;
@@ @@
      * Opcode #0x32.
      *
      * LDD (HL), A
-     *
-     * @param Core $core
      */
-    public static function opcode50(Core $core)
+    public static function opcode50(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->registerA);
         $core->registersHL = $core->unswtuw($core->registersHL - 1);
@@ @@
      * Opcode #0x33.
      *
      * INC SP
-     *
-     * @param Core $core
      */
-    public static function opcode51(Core $core)
+    public static function opcode51(Core $core): void
     {
         $core->stackPointer = ($core->stackPointer + 1) & 0xFFFF;
     }
@@ @@
      * Opcode #0x34.
      *
      * INC (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode52(Core $core)
+    public static function opcode52(Core $core): void
     {
         $temp_var = (($core->memoryRead($core->registersHL) + 1) & 0xFF);
         $core->FZero = ($temp_var == 0);
@@ @@
      * Opcode #0x35.
      *
      * DEC (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode53(Core $core)
+    public static function opcode53(Core $core): void
     {
         $temp_var = $core->unsbtub($core->memoryRead($core->registersHL) - 1);
         $core->FZero = ($temp_var == 0);
@@ @@
      * Opcode #0x36.
      *
      * LD (HL), n
-     *
-     * @param Core $core
      */
-    public static function opcode54(Core $core)
+    public static function opcode54(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->memoryRead($core->programCounter));
         $core->programCounter = ($core->programCounter + 1) & 0xFFFF;
@@ @@
      * Opcode #0x37.
      *
      * SCF
-     *
-     * @param Core $core
      */
-    public static function opcode55(Core $core)
+    public static function opcode55(Core $core): void
     {
         $core->FCarry = true;
-        $core->FSubtract = $core->FHalfCarry = false;
+        $core->FSubtract = false;
+        $core->FHalfCarry = false;
     }

     /**
@@ @@
      * Opcode #0x38.
      *
      * JR cc, n
-     *
-     * @param Core $core
      */
-    public static function opcode56(Core $core)
+    public static function opcode56(Core $core): void
     {
         if ($core->FCarry) {
             $core->programCounter = $core->nswtuw($core->programCounter + $core->usbtsb($core->memoryRead($core->programCounter)) + 1);
@@ @@
      * Opcode #0x39.
      *
      * ADD HL, SP
-     *
-     * @param Core $core
      */
-    public static function opcode57(Core $core)
+    public static function opcode57(Core $core): void
     {
         $dirtySum = $core->registersHL + $core->stackPointer;
         $core->FHalfCarry = (($core->registersHL & 0xFFF) + ($core->stackPointer & 0xFFF) > 0xFFF);
@@ @@
      * Opcode #0x3A.
      *
      *  LDD A, (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode58(Core $core)
+    public static function opcode58(Core $core): void
     {
         $core->registerA = $core->memoryRead($core->registersHL);
         $core->registersHL = $core->unswtuw($core->registersHL - 1);
@@ @@
      * Opcode #0x3B.
      *
      * DEC SP
-     *
-     * @param Core $core
      */
-    public static function opcode59(Core $core)
+    public static function opcode59(Core $core): void
     {
         $core->stackPointer = $core->unswtuw($core->stackPointer - 1);
     }
@@ @@
      * Opcode #0x3C.
      *
      * INC A
-     *
-     * @param Core $core
      */
-    public static function opcode60(Core $core)
+    public static function opcode60(Core $core): void
     {
         $core->registerA = (($core->registerA + 1) & 0xFF);
         $core->FZero = ($core->registerA == 0);
@@ @@
      * Opcode #0x3D.
      *
      * DEC A
-     *
-     * @param Core $core
      */
-    public static function opcode61(Core $core)
+    public static function opcode61(Core $core): void
     {
         $core->registerA = $core->unsbtub($core->registerA - 1);
         $core->FZero = ($core->registerA == 0);
@@ @@
      * Opcode #0x3E.
      *
      * LD A, n
-     *
-     * @param Core $core
      */
-    public static function opcode62(Core $core)
+    public static function opcode62(Core $core): void
     {
         $core->registerA = $core->memoryRead($core->programCounter);
         $core->programCounter = ($core->programCounter + 1) & 0xFFFF;
@@ @@
      * Opcode #0x3F.
      *
      * CCF
-     *
-     * @param Core $core
      */
-    public static function opcode63(Core $core)
+    public static function opcode63(Core $core): void
     {
         $core->FCarry = !$core->FCarry;
-        $core->FSubtract = $core->FHalfCarry = false;
+        $core->FSubtract = false;
+        $core->FHalfCarry = false;
     }

     /**
@@ @@
      * Opcode #0x40.
      *
      * LD B, B
-     *
-     * @param Core $core
      */
-    public static function opcode64(Core $core)
+    public static function opcode64(Core $core): void
     {
         //Do nothing...
     }
@@ @@
      * Opcode #0x41.
      *
      * LD B, C
-     *
-     * @param Core $core
      */
-    public static function opcode65(Core $core)
+    public static function opcode65(Core $core): void
     {
         $core->registerB = $core->registerC;
     }
@@ @@
      * Opcode #0x42.
      *
      * LD B, D
-     *
-     * @param Core $core
      */
-    public static function opcode66(Core $core)
+    public static function opcode66(Core $core): void
     {
         $core->registerB = $core->registerD;
     }
@@ @@
      * Opcode #0x43.
      *
      * LD B, E
-     *
-     * @param Core $core
      */
-    public static function opcode67(Core $core)
+    public static function opcode67(Core $core): void
     {
         $core->registerB = $core->registerE;
     }
@@ @@
      * Opcode #0x44.
      *
      * LD B, H
-     *
-     * @param Core $core
      */
-    public static function opcode68(Core $core)
+    public static function opcode68(Core $core): void
     {
         $core->registerB = ($core->registersHL >> 8);
     }
@@ @@
      * Opcode #0x45.
      *
      * LD B, L
-     *
-     * @param Core $core
      */
-    public static function opcode69(Core $core)
+    public static function opcode69(Core $core): void
     {
         $core->registerB = ($core->registersHL & 0xFF);
     }
@@ @@
      * Opcode #0x46.
      *
      * LD B, (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode70(Core $core)
+    public static function opcode70(Core $core): void
     {
         $core->registerB = $core->memoryRead($core->registersHL);
     }
@@ @@
      * Opcode #0x47.
      *
      * LD B, A
-     *
-     * @param Core $core
      */
-    public static function opcode71(Core $core)
+    public static function opcode71(Core $core): void
     {
         $core->registerB = $core->registerA;
     }
@@ @@
      * Opcode #0x48.
      *
      * LD C, B
-     *
-     * @param Core $core
      */
-    public static function opcode72(Core $core)
+    public static function opcode72(Core $core): void
     {
         $core->registerC = $core->registerB;
     }
@@ @@
      * Opcode #0x49.
      *
      * LD C, C
-     *
-     * @param Core $core
      */
-    public static function opcode73(Core $core)
+    public static function opcode73(Core $core): void
     {
         //Do nothing...
     }
@@ @@
      * Opcode #0x4A.
      *
      * LD C, D
-     *
-     * @param Core $core
      */
-    public static function opcode74(Core $core)
+    public static function opcode74(Core $core): void
     {
         $core->registerC = $core->registerD;
     }
@@ @@
      * Opcode #0x4B.
      *
      * LD C, E
-     *
-     * @param Core $core
      */
-    public static function opcode75(Core $core)
+    public static function opcode75(Core $core): void
     {
         $core->registerC = $core->registerE;
     }
@@ @@
      * Opcode #0x4C.
      *
      * LD C, H
-     *
-     * @param Core $core
      */
-    public static function opcode76(Core $core)
+    public static function opcode76(Core $core): void
     {
         $core->registerC = ($core->registersHL >> 8);
     }
@@ @@
      * Opcode #0x4D.
      *
      * LD C, L
-     *
-     * @param Core $core
      */
-    public static function opcode77(Core $core)
+    public static function opcode77(Core $core): void
     {
         $core->registerC = ($core->registersHL & 0xFF);
     }
@@ @@
      * Opcode #0x4E.
      *
      * LD C, (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode78(Core $core)
+    public static function opcode78(Core $core): void
     {
         $core->registerC = $core->memoryRead($core->registersHL);
     }
@@ @@
      * Opcode #0x4F.
      *
      * LD C, A
-     *
-     * @param Core $core
      */
-    public static function opcode79(Core $core)
+    public static function opcode79(Core $core): void
     {
         $core->registerC = $core->registerA;
     }
@@ @@
      * Opcode #0x50.
      *
      * LD D, B
-     *
-     * @param Core $core
      */
-    public static function opcode80(Core $core)
+    public static function opcode80(Core $core): void
     {
         $core->registerD = $core->registerB;
     }
@@ @@
      * Opcode #0x51.
      *
      * LD D, C
-     *
-     * @param Core $core
      */
-    public static function opcode81(Core $core)
+    public static function opcode81(Core $core): void
     {
         $core->registerD = $core->registerC;
     }
@@ @@
      * Opcode #0x52.
      *
      * LD D, D
-     *
-     * @param Core $core
      */
-    public static function opcode82(Core $core)
+    public static function opcode82(Core $core): void
     {
         //Do nothing...
     }
@@ @@
      * Opcode #0x53.
      *
      * LD D, E
-     *
-     * @param Core $core
      */
-    public static function opcode83(Core $core)
+    public static function opcode83(Core $core): void
     {
         $core->registerD = $core->registerE;
     }
@@ @@
      * Opcode #0x54.
      *
      * LD D, H
-     *
-     * @param Core $core
      */
-    public static function opcode84(Core $core)
+    public static function opcode84(Core $core): void
     {
         $core->registerD = ($core->registersHL >> 8);
     }
@@ @@
      * Opcode #0x55.
      *
      * LD D, L
-     *
-     * @param Core $core
      */
-    public static function opcode85(Core $core)
+    public static function opcode85(Core $core): void
     {
         $core->registerD = ($core->registersHL & 0xFF);
     }
@@ @@
      * Opcode #0x56.
      *
      * LD D, (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode86(Core $core)
+    public static function opcode86(Core $core): void
     {
         $core->registerD = $core->memoryRead($core->registersHL);
     }
@@ @@
      * Opcode #0x57.
      *
      * LD D, A
-     *
-     * @param Core $core
      */
-    public static function opcode87(Core $core)
+    public static function opcode87(Core $core): void
     {
         $core->registerD = $core->registerA;
     }
@@ @@
      * Opcode #0x58.
      *
      * LD E, B
-     *
-     * @param Core $core
      */
-    public static function opcode88(Core $core)
+    public static function opcode88(Core $core): void
     {
         $core->registerE = $core->registerB;
     }
@@ @@
      * Opcode #0x59.
      *
      * LD E, C
-     *
-     * @param Core $core
      */
-    public static function opcode89(Core $core)
+    public static function opcode89(Core $core): void
     {
         $core->registerE = $core->registerC;
     }
@@ @@
      * Opcode #0x5A.
      *
      * LD E, D
-     *
-     * @param Core $core
      */
-    public static function opcode90(Core $core)
+    public static function opcode90(Core $core): void
     {
         $core->registerE = $core->registerD;
     }
@@ @@
      * Opcode #0x5B.
      *
      * LD E, E
-     *
-     * @param Core $core
      */
-    public static function opcode91(Core $core)
+    public static function opcode91(Core $core): void
     {
         //Do nothing...
     }
@@ @@
      * Opcode #0x5C.
      *
      * LD E, H
-     *
-     * @param Core $core
      */
-    public static function opcode92(Core $core)
+    public static function opcode92(Core $core): void
     {
         $core->registerE = ($core->registersHL >> 8);
     }
@@ @@
      * Opcode #0x5D.
      *
      * LD E, L
-     *
-     * @param Core $core
      */
-    public static function opcode93(Core $core)
+    public static function opcode93(Core $core): void
     {
         $core->registerE = ($core->registersHL & 0xFF);
     }
@@ @@
      * Opcode #0x5E.
      *
      * LD E, (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode94(Core $core)
+    public static function opcode94(Core $core): void
     {
         $core->registerE = $core->memoryRead($core->registersHL);
     }
@@ @@
      * Opcode #0x5F.
      *
      * LD E, A
-     *
-     * @param Core $core
      */
-    public static function opcode95(Core $core)
+    public static function opcode95(Core $core): void
     {
         $core->registerE = $core->registerA;
     }
@@ @@
      * Opcode #0x60.
      *
      * LD H, B
-     *
-     * @param Core $core
      */
-    public static function opcode96(Core $core)
+    public static function opcode96(Core $core): void
     {
         $core->registersHL = ($core->registerB << 8) + ($core->registersHL & 0xFF);
     }
@@ @@
      * Opcode #0x61.
      *
      * LD H, C
-     *
-     * @param Core $core
      */
-    public static function opcode97(Core $core)
+    public static function opcode97(Core $core): void
     {
         $core->registersHL = ($core->registerC << 8) + ($core->registersHL & 0xFF);
     }
@@ @@
      * Opcode #0x62.
      *
      * LD H, D
-     *
-     * @param Core $core
      */
-    public static function opcode98(Core $core)
+    public static function opcode98(Core $core): void
     {
         $core->registersHL = ($core->registerD << 8) + ($core->registersHL & 0xFF);
     }
@@ @@
      * Opcode #0x63.
      *
      * LD H, E
-     *
-     * @param Core $core
      */
-    public static function opcode99(Core $core)
+    public static function opcode99(Core $core): void
     {
         $core->registersHL = ($core->registerE << 8) + ($core->registersHL & 0xFF);
     }
@@ @@
      * Opcode #0x64.
      *
      * LD H, H
-     *
-     * @param Core $core
      */
-    public static function opcode100(Core $core)
+    public static function opcode100(Core $core): void
     {
         //Do nothing...
     }
@@ @@
      * Opcode #0x65.
      *
      * LD H, L
-     *
-     * @param Core $core
      */
-    public static function opcode101(Core $core)
+    public static function opcode101(Core $core): void
     {
         $core->registersHL = (($core->registersHL & 0xFF) << 8) + ($core->registersHL & 0xFF);
     }
@@ @@
      * Opcode #0x66.
      *
      * LD H, (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode102(Core $core)
+    public static function opcode102(Core $core): void
     {
         $core->registersHL = ($core->memoryRead($core->registersHL) << 8) + ($core->registersHL & 0xFF);
     }
@@ @@
      * Opcode #0x67.
      *
      * LD H, A
-     *
-     * @param Core $core
      */
-    public static function opcode103(Core $core)
+    public static function opcode103(Core $core): void
     {
         $core->registersHL = ($core->registerA << 8) + ($core->registersHL & 0xFF);
     }
@@ @@
      * Opcode #0x68.
      *
      * LD L, B
-     *
-     * @param Core $core
      */
-    public static function opcode104(Core $core)
+    public static function opcode104(Core $core): void
     {
         $core->registersHL = ($core->registersHL & 0xFF00) + $core->registerB;
     }
@@ @@
      * Opcode #0x69.
      *
      * LD L, C
-     *
-     * @param Core $core
      */
-    public static function opcode105(Core $core)
+    public static function opcode105(Core $core): void
     {
         $core->registersHL = ($core->registersHL & 0xFF00) + $core->registerC;
     }
@@ @@
      * Opcode #0x6A.
      *
      * LD L, D
-     *
-     * @param Core $core
      */
-    public static function opcode106(Core $core)
+    public static function opcode106(Core $core): void
     {
         $core->registersHL = ($core->registersHL & 0xFF00) + $core->registerD;
     }
@@ @@
      * Opcode #0x6B.
      *
      * LD L, E
-     *
-     * @param Core $core
      */
-    public static function opcode107(Core $core)
+    public static function opcode107(Core $core): void
     {
         $core->registersHL = ($core->registersHL & 0xFF00) + $core->registerE;
     }
@@ @@
      * Opcode #0x6C.
      *
      * LD L, H
-     *
-     * @param Core $core
      */
-    public static function opcode108(Core $core)
+    public static function opcode108(Core $core): void
     {
         $core->registersHL = ($core->registersHL & 0xFF00) + ($core->registersHL >> 8);
     }
@@ @@
      * Opcode #0x6D.
      *
      * LD L, L
-     *
-     * @param Core $core
      */
-    public static function opcode109(Core $core)
+    public static function opcode109(Core $core): void
     {
         //Do nothing...
     }
@@ @@
      * Opcode #0x6E.
      *
      * LD L, (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode110(Core $core)
+    public static function opcode110(Core $core): void
     {
         $core->registersHL = ($core->registersHL & 0xFF00) + $core->memoryRead($core->registersHL);
     }
@@ @@
      * Opcode #0x6F.
      *
      * LD L, A
-     *
-     * @param Core $core
      */
-    public static function opcode111(Core $core)
+    public static function opcode111(Core $core): void
     {
         $core->registersHL = ($core->registersHL & 0xFF00) + $core->registerA;
     }
@@ @@
      * Opcode #0x70.
      *
      * LD (HL), B
-     *
-     * @param Core $core
      */
-    public static function opcode112(Core $core)
+    public static function opcode112(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->registerB);
     }
@@ @@
      * Opcode #0x71.
      *
      * LD (HL), C
-     *
-     * @param Core $core
      */
-    public static function opcode113(Core $core)
+    public static function opcode113(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->registerC);
     }
@@ @@
      * Opcode #0x72.
      *
      * LD (HL), D
-     *
-     * @param Core $core
      */
-    public static function opcode114(Core $core)
+    public static function opcode114(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->registerD);
     }
@@ @@
      * Opcode #0x73.
      *
      * LD (HL), E
-     *
-     * @param Core $core
      */
-    public static function opcode115(Core $core)
+    public static function opcode115(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->registerE);
     }
@@ @@
      * Opcode #0x74.
      *
      * LD (HL), H
-     *
-     * @param Core $core
      */
-    public static function opcode116(Core $core)
+    public static function opcode116(Core $core): void
     {
         $core->memoryWrite($core->registersHL, ($core->registersHL >> 8));
     }
@@ @@
      * Opcode #0x75.
      *
      * LD (HL), L
-     *
-     * @param Core $core
      */
-    public static function opcode117(Core $core)
+    public static function opcode117(Core $core): void
     {
         $core->memoryWrite($core->registersHL, ($core->registersHL & 0xFF));
     }
@@ @@
      *
      * HALT
      *
-     * @param \GameBoy\Core $core
      * @throws Exception
      */
-    public static function opcode118(Core $core)
+    public static function opcode118(Core $core): void
     {
         if ($core->untilEnable == 1) {
             /*VBA-M says this fixes Torpedo Range (Seems to work):
@@ @@
             if (!$core->halt && !$core->IME && !$core->cGBC && ($core->memory[0xFF0F] & $core->memory[0xFFFF] & 0x1F) > 0) {
                 $core->skipPCIncrement = true;
             }
+
             $core->halt = true;
             while ($core->halt && ($core->stopEmulator & 1) === 0) {
                 /*We're hijacking the main interpreter loop to do this dirty business
@@ @@
                         $core->halt = false; //Get out of halt state if in halt state.
                         return; //Let the main interrupt handler compute the interrupt.
                     }
+
                     $testbit = 1 << ++$bitShift;
                 }
+
                 $core->CPUTicks = 1; //1 machine cycle under HALT...
                 //Timing:
                 $core->updateCore();
@@ @@
      * Opcode #0x77.
      *
      * LD (HL), A
-     *
-     * @param Core $core
      */
-    public static function opcode119(Core $core)
+    public static function opcode119(Core $core): void
     {
         $core->memoryWrite($core->registersHL, $core->registerA);
     }
@@ @@
      * Opcode #0x78.
      *
      * LD A, B
-     *
-     * @param Core $core
      */
-    public static function opcode120(Core $core)
+    public static function opcode120(Core $core): void
     {
         $core->registerA = $core->registerB;
     }
@@ @@
      * Opcode #0x79.
      *
      * LD A, C
-     *
-     * @param Core $core
      */
-    public static function opcode121(Core $core)
+    public static function opcode121(Core $core): void
     {
         $core->registerA = $core->registerC;
     }
@@ @@
      * Opcode #0x7A.
      *
      * LD A, D
-     *
-     * @param Core $core
      */
-    public static function opcode122(Core $core)
+    public static function opcode122(Core $core): void
     {
         $core->registerA = $core->registerD;
     }
@@ @@
      * Opcode #0x7B.
      *
      * LD A, E
-     *
-     * @param Core $core
      */
-    public static function opcode123(Core $core)
+    public static function opcode123(Core $core): void
     {
         $core->registerA = $core->registerE;
     }
@@ @@
      * Opcode #0x7C.
      *
      * LD A, H
-     *
-     * @param Core $core
      */
-    public static function opcode124(Core $core)
+    public static function opcode124(Core $core): void
     {
         $core->registerA = ($core->registersHL >> 8);
     }
@@ @@
      * Opcode #0x7D.
      *
      * LD A, L
-     *
-     * @param Core $core
      */
-    public static function opcode125(Core $core)
+    public static function opcode125(Core $core): void
     {
         $core->registerA = ($core->registersHL & 0xFF);
     }
@@ @@
      * Opcode #0x7E.
      *
      * LD, A, (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode126(Core $core)
+    public static function opcode126(Core $core): void
     {
         $core->registerA = $core->memoryRead($core->registersHL);
     }
@@ @@
      * Opcode #0x7F.
      *
      * LD A, A
-     *
-     * @param Core $core
      */
-    public static function opcode127(Core $core)
+    public static function opcode127(Core $core): void
     {
         //Do Nothing...
     }
@@ @@
      * Opcode #0x80.
      *
      * ADD A, B
-     *
-     * @param Core $core
      */
-    public static function opcode128(Core $core)
+    public static function opcode128(Core $core): void
     {
         $dirtySum = $core->registerA + $core->registerB;
         $core->FHalfCarry = ($dirtySum & 0xF) < ($core->registerA & 0xF);
@@ @@
      * Opcode #0x81.
      *
      * ADD A, C
-     *
-     * @param Core $core
      */
-    public static function opcode129(Core $core)
+    public static function opcode129(Core $core): void
     {
         $dirtySum = $core->registerA + $core->registerC;
         $core->FHalfCarry = ($dirtySum & 0xF) < ($core->registerA & 0xF);
@@ @@
      * Opcode #0x82.
      *
      * ADD A, D
-     *
-     * @param Core $core
      */
-    public static function opcode130(Core $core)
+    public static function opcode130(Core $core): void
     {
         $dirtySum = $core->registerA + $core->registerD;
         $core->FHalfCarry = ($dirtySum & 0xF) < ($core->registerA & 0xF);
@@ @@
      * Opcode #0x83.
      *
      * ADD A, E
-     *
-     * @param Core $core
      */
-    public static function opcode131(Core $core)
+    public static function opcode131(Core $core): void
     {
         $dirtySum = $core->registerA + $core->registerE;
         $core->FHalfCarry = ($dirtySum & 0xF) < ($core->registerA & 0xF);
@@ @@
      * Opcode #0x84.
      *
      * ADD A, H
-     *
-     * @param Core $core
      */
-    public static function opcode132(Core $core)
+    public static function opcode132(Core $core): void
     {
         $dirtySum = $core->registerA + ($core->registersHL >> 8);
         $core->FHalfCarry = ($dirtySum & 0xF) < ($core->registerA & 0xF);
@@ @@
      * Opcode #0x85.
      *
      * ADD A, L
-     *
-     * @param Core $core
      */
-    public static function opcode133(Core $core)
+    public static function opcode133(Core $core): void
     {
         $dirtySum = $core->registerA + ($core->registersHL & 0xFF);
         $core->FHalfCarry = ($dirtySum & 0xF) < ($core->registerA & 0xF);
@@ @@
      * Opcode #0x86.
      *
      * ADD A, (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode134(Core $core)
+    public static function opcode134(Core $core): void
     {
         $dirtySum = $core->registerA + $core->memoryRead($core->registersHL);
         $core->FHalfCarry = ($dirtySum & 0xF) < ($core->registerA & 0xF);
@@ @@
      * Opcode #0x87.
      *
      * ADD A, A
-     *
-     * @param Core $core
      */
-    public static function opcode135(Core $core)
+    public static function opcode135(Core $core): void
     {
         $dirtySum = $core->registerA * 2;
         $core->FHalfCarry = ($dirtySum & 0xF) < ($core->registerA & 0xF);
@@ @@
      * Opcode #0x88.
      *
      * ADC A, B
-     *
-     * @param Core $core
      */
-    public static function opcode136(Core $core)
+    public static function opcode136(Core $core): void
     {
         $dirtySum = $core->registerA + $core->registerB + (($core->FCarry) ? 1 : 0);
         $core->FHalfCarry = (($core->registerA & 0xF) + ($core->registerB & 0xF) + (($core->FCarry) ? 1 : 0) > 0xF);
@@ @@
      * Opcode #0x89.
      *
      * ADC A, C
-     *
-     * @param Core $core
      */
-    public static function opcode137(Core $core)
+    public static function opcode137(Core $core): void
     {
         $dirtySum = $core->registerA + $core->registerC + (($core->FCarry) ? 1 : 0);
         $core->FHalfCarry = (($core->registerA & 0xF) + ($core->registerC & 0xF) + (($core->FCarry) ? 1 : 0) > 0xF);
@@ @@
      * Opcode #0x8A.
      *
      * ADC A, D
-     *
-     * @param Core $core
      */
-    public static function opcode138(Core $core)
+    public static function opcode138(Core $core): void
     {
         $dirtySum = $core->registerA + $core->registerD + (($core->FCarry) ? 1 : 0);
         $core->FHalfCarry = (($core->registerA & 0xF) + ($core->registerD & 0xF) + (($core->FCarry) ? 1 : 0) > 0xF);
@@ @@
      * Opcode #0x8B.
      *
      * ADC A, E
-     *
-     * @param Core $core
      */
-    public static function opcode139(Core $core)
+    public static function opcode139(Core $core): void
     {
         $dirtySum = $core->registerA + $core->registerE + (($core->FCarry) ? 1 : 0);
         $core->FHalfCarry = (($core->registerA & 0xF) + ($core->registerE & 0xF) + (($core->FCarry) ? 1 : 0) > 0xF);
@@ @@
      * Opcode #0x8C.
      *
      * ADC A, H
-     *
-     * @param Core $core
      */
-    public static function opcode140(Core $core)
+    public static function opcode140(Core $core): void
     {
         $tempValue = ($core->registersHL >> 8);
         $dirtySum = $core->registerA + $tempValue + (($core->FCarry) ? 1 : 0);
@@ @@
      * Opcode #0x8D.
      *
      * ADC A, L
-     *
-     * @param Core $core
      */
-    public static function opcode141(Core $core)
+    public static function opcode141(Core $core): void
     {
         $tempValue = ($core->registersHL & 0xFF);
         $dirtySum = $core->registerA + $tempValue + (($core->FCarry) ? 1 : 0);
@@ @@
      * Opcode #0x8E.
      *
      * ADC A, (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode142(Core $core)
+    public static function opcode142(Core $core): void
     {
         $tempValue = $core->memoryRead($core->registersHL);
         $dirtySum = $core->registerA + $tempValue + (($core->FCarry) ? 1 : 0);
@@ @@
      * Opcode #0x8F.
      *
      * ADC A, A
-     *
-     * @param Core $core
      */
-    public static function opcode143(Core $core)
+    public static function opcode143(Core $core): void
     {
         $dirtySum = ($core->registerA * 2) + (($core->FCarry) ? 1 : 0);
         $core->FHalfCarry = (($core->registerA & 0xF) + ($core->registerA & 0xF) + (($core->FCarry) ? 1 : 0) > 0xF);
@@ @@
      * Opcode #0x90.
      *
      * SUB A, B
-     *
-     * @param Core $core
      */
-    public static function opcode144(Core $core)
+    public static function opcode144(Core $core): void
     {
         $dirtySum = $core->registerA - $core->registerB;
         $core->FHalfCarry = ($core->registerA & 0xF) < ($core->registerB & 0xF);
@@ @@
      * Opcode #0x91.
      *
      * SUB A, C
-     *
-     * @param Core $core
      */
-    public static function opcode145(Core $core)
+    public static function opcode145(Core $core): void
     {
         $dirtySum = $core->registerA - $core->registerC;
         $core->FHalfCarry = ($core->registerA & 0xF) < ($core->registerC & 0xF);
@@ @@
      * Opcode #0x92.
      *
      * SUB A, D
-     *
-     * @param Core $core
      */
-    public static function opcode146(Core $core)
+    public static function opcode146(Core $core): void
     {
         $dirtySum = $core->registerA - $core->registerD;
         $core->FHalfCarry = ($core->registerA & 0xF) < ($core->registerD & 0xF);
@@ @@
      * Opcode #0x93.
      *
      * SUB A, E
-     *
-     * @param Core $core
      */
-    public static function opcode147(Core $core)
+    public static function opcode147(Core $core): void
     {
         $dirtySum = $core->registerA - $core->registerE;
         $core->FHalfCarry = ($core->registerA & 0xF) < ($core->registerE & 0xF);
@@ @@
      * Opcode #0x94.
      *
      * SUB A, H
-     *
-     * @param Core $core
      */
-    public static function opcode148(Core $core)
+    public static function opcode148(Core $core): void
     {
         $temp_var = $core->registersHL >> 8;
         $dirtySum = $core->registerA - $temp_var;
@@ @@
      * Opcode #0x95.
      *
      * SUB A, L
-     *
-     * @param Core $core
      */
-    public static function opcode149(Core $core)
+    public static function opcode149(Core $core): void
     {
         $dirtySum = $core->registerA - ($core->registersHL & 0xFF);
         $core->FHalfCarry = ($core->registerA & 0xF) < ($core->registersHL & 0xF);
@@ @@
      * Opcode #0x96.
      *
      * SUB A, (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode150(Core $core)
+    public static function opcode150(Core $core): void
     {
         $temp_var = $core->memoryRead($core->registersHL);
         $dirtySum = $core->registerA - $temp_var;
@@ @@
      * Opcode #0x97.
      *
      * SUB A, A
-     *
-     * @param Core $core
      */
-    public static function opcode151(Core $core)
+    public static function opcode151(Core $core): void
     {
         //number - same number == 0
         $core->registerA = 0;
-        $core->FHalfCarry = $core->FCarry = false;
-        $core->FZero = $core->FSubtract = true;
+        $core->FHalfCarry = false;
+        $core->FCarry = false;
+        $core->FZero = true;
+        $core->FSubtract = true;
     }

     /**
@@ @@
      * Opcode #0x98.
      *
      * SBC A, B
-     *
-     * @param Core $core
      */
-    public static function opcode152(Core $core)
+    public static function opcode152(Core $core): void
     {
         $dirtySum = $core->registerA - $core->registerB - (($core->FCarry) ? 1 : 0);
         $core->FHalfCarry = (($core->registerA & 0xF) - ($core->registerB & 0xF) - (($core->FCarry) ? 1 : 0) < 0);
@@ @@
      * Opcode #0x99.
      *
      * SBC A, C
-     *
-     * @param Core $core
      */
-    public static function opcode153(Core $core)
+    public static function opcode153(Core $core): void
     {
         $dirtySum = $core->registerA - $core->registerC - (($core->FCarry) ? 1 : 0);
         $core->FHalfCarry = (($core->registerA & 0xF) - ($core->registerC & 0xF) - (($core->FCarry) ? 1 : 0) < 0);
@@ @@
      * Opcode #0x9A.
      *
      * SBC A, D
-     *
-     * @param Core $core
      */
-    public static function opcode154(Core $core)
+    public static function opcode154(Core $core): void
     {
         $dirtySum = $core->registerA - $core->registerD - (($core->FCarry) ? 1 : 0);
         $core->FHalfCarry = (($core->registerA & 0xF) - ($core->registerD & 0xF) - (($core->FCarry) ? 1 : 0) < 0);
@@ @@
      * Opcode #0x9B.
      *
      * SBC A, E
-     *
-     * @param Core $core
      */
-    public static function opcode155(Core $core)
+    public static function opcode155(Core $core): void
     {
         $dirtySum = $core->registerA - $core->registerE - (($core->FCarry) ? 1 : 0);
         $core->FHalfCarry = (($core->registerA & 0xF) - ($core->registerE & 0xF) - (($core->FCarry) ? 1 : 0) < 0);
@@ @@
      * Opcode #0x9C.
      *
      * SBC A, H
-     *
-     * @param Core $core
      */
-    public static function opcode156(Core $core)
+    public static function opcode156(Core $core): void
     {
         $temp_var = $core->registersHL >> 8;
         $dirtySum = $core->registerA - $temp_var - (($core->FCarry) ? 1 : 0);
@@ @@
      * Opcode #0x9D.
      *
      * SBC A, L
-     *
-     * @param Core $core
      */
-    public static function opcode157(Core $core)
+    public static function opcode157(Core $core): void
     {
         $dirtySum = $core->registerA - ($core->registersHL & 0xFF) - (($core->FCarry) ? 1 : 0);
         $core->FHalfCarry = (($core->registerA & 0xF) - ($core->registersHL & 0xF) - (($core->FCarry) ? 1 : 0) < 0);
@@ @@
      * Opcode #0x9E.
      *
      * SBC A, (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode158(Core $core)
+    public static function opcode158(Core $core): void
     {
         $temp_var = $core->memoryRead($core->registersHL);
         $dirtySum = $core->registerA - $temp_var - (($core->FCarry) ? 1 : 0);
@@ @@
      * Opcode #0x9F.
      *
      * SBC A, A
-     *
-     * @param Core $core
      */
-    public static function opcode159(Core $core)
+    public static function opcode159(Core $core): void
     {
         //Optimized SBC A:
         if ($core->FCarry) {
             $core->FZero = false;
-            $core->FSubtract = $core->FHalfCarry = $core->FCarry = true;
+            $core->FSubtract = true;
+            $core->FHalfCarry = true;
+            $core->FCarry = true;
             $core->registerA = 0xFF;
         } else {
-            $core->FHalfCarry = $core->FCarry = false;
-            $core->FSubtract = $core->FZero = true;
+            $core->FHalfCarry = false;
+            $core->FCarry = false;
+            $core->FSubtract = true;
+            $core->FZero = true;
             $core->registerA = 0;
         }
     }
@@ @@
      * Opcode #0xA0.
      *
      * AND B
-     *
-     * @param Core $core
      */
-    public static function opcode160(Core $core)
+    public static function opcode160(Core $core): void
     {
         $core->registerA &= $core->registerB;
         $core->FZero = ($core->registerA == 0);
         $core->FHalfCarry = true;
-        $core->FSubtract = $core->FCarry = false;
+        $core->FSubtract = false;
+        $core->FCarry = false;
     }

     /**
@@ @@
      * Opcode #0xA1.
      *
      * AND C
-     *
-     * @param Core $core
      */
-    public static function opcode161(Core $core)
+    public static function opcode161(Core $core): void
     {
         $core->registerA &= $core->registerC;
         $core->FZero = ($core->registerA == 0);
         $core->FHalfCarry = true;
-        $core->FSubtract = $core->FCarry = false;
+        $core->FSubtract = false;
+        $core->FCarry = false;
     }

     /**
@@ @@
      * Opcode #0xA2.
      *
      * AND D
-     *
-     * @param Core $core
      */
-    public static function opcode162(Core $core)
+    public static function opcode162(Core $core): void
     {
         $core->registerA &= $core->registerD;
         $core->FZero = ($core->registerA == 0);
         $core->FHalfCarry = true;
-        $core->FSubtract = $core->FCarry = false;
+        $core->FSubtract = false;
+        $core->FCarry = false;
     }

     /**
@@ @@
      * Opcode #0xA3.
      *
      * AND E
-     *
-     * @param Core $core
      */
-    public static function opcode163(Core $core)
+    public static function opcode163(Core $core): void
     {
         $core->registerA &= $core->registerE;
         $core->FZero = ($core->registerA == 0);
         $core->FHalfCarry = true;
-        $core->FSubtract = $core->FCarry = false;
+        $core->FSubtract = false;
+        $core->FCarry = false;
     }

     /**
@@ @@
      * Opcode #0xA4.
      *
      * AND H
-     *
-     * @param Core $core
      */
-    public static function opcode164(Core $core)
+    public static function opcode164(Core $core): void
     {
         $core->registerA &= ($core->registersHL >> 8);
         $core->FZero = ($core->registerA == 0);
         $core->FHalfCarry = true;
-        $core->FSubtract = $core->FCarry = false;
+        $core->FSubtract = false;
+        $core->FCarry = false;
     }

     /**
@@ @@
      * Opcode #0xA5.
      *
      * AND L
-     *
-     * @param Core $core
      */
-    public static function opcode165(Core $core)
+    public static function opcode165(Core $core): void
     {
         $core->registerA &= ($core->registersHL & 0xFF);
         $core->FZero = ($core->registerA == 0);
         $core->FHalfCarry = true;
-        $core->FSubtract = $core->FCarry = false;
+        $core->FSubtract = false;
+        $core->FCarry = false;
     }

     /**
@@ @@
      * Opcode #0xA6.
      *
      * AND (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode166(Core $core)
+    public static function opcode166(Core $core): void
     {
         $core->registerA &= $core->memoryRead($core->registersHL);
         $core->FZero = ($core->registerA == 0);
         $core->FHalfCarry = true;
-        $core->FSubtract = $core->FCarry = false;
+        $core->FSubtract = false;
+        $core->FCarry = false;
     }

     /**
@@ @@
      * Opcode #0xA7.
      *
      * AND A
-     *
-     * @param Core $core
      */
-    public static function opcode167(Core $core)
+    public static function opcode167(Core $core): void
     {
         //number & same number = same number
         $core->FZero = ($core->registerA == 0);
         $core->FHalfCarry = true;
-        $core->FSubtract = $core->FCarry = false;
+        $core->FSubtract = false;
+        $core->FCarry = false;
     }

     /**
@@ @@
      * Opcode #0xA8.
      *
      * XOR B
-     *
-     * @param Core $core
      */
-    public static function opcode168(Core $core)
+    public static function opcode168(Core $core): void
     {
         $core->registerA ^= $core->registerB;
         $core->FZero = ($core->registerA == 0);
-        $core->FSubtract = $core->FHalfCarry = $core->FCarry = false;
+        $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FCarry = false;
     }

     /**
@@ @@
      * Opcode #0xA9.
      *
      * XOR C
-     *
-     * @param Core $core
      */
-    public static function opcode169(Core $core)
+    public static function opcode169(Core $core): void
     {
         $core->registerA ^= $core->registerC;
         $core->FZero = ($core->registerA == 0);
-        $core->FSubtract = $core->FHalfCarry = $core->FCarry = false;
+        $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FCarry = false;
     }

     /**
@@ @@
      * Opcode #0xAA.
      *
      * XOR D
-     *
-     * @param Core $core
      */
-    public static function opcode170(Core $core)
+    public static function opcode170(Core $core): void
     {
         $core->registerA ^= $core->registerD;
         $core->FZero = ($core->registerA == 0);
-        $core->FSubtract = $core->FHalfCarry = $core->FCarry = false;
+        $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FCarry = false;
     }

     /**
@@ @@
      * Opcode #0xAB.
      *
      * XOR E
-     *
-     * @param Core $core
      */
-    public static function opcode171(Core $core)
+    public static function opcode171(Core $core): void
     {
         $core->registerA ^= $core->registerE;
         $core->FZero = ($core->registerA == 0);
-        $core->FSubtract = $core->FHalfCarry = $core->FCarry = false;
+        $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FCarry = false;
     }

     /**
@@ @@
      * Opcode #0xAC.
      *
      * XOR H
-     *
-     * @param Core $core
      */
-    public static function opcode172(Core $core)
+    public static function opcode172(Core $core): void
     {
         $core->registerA ^= ($core->registersHL >> 8);
         $core->FZero = ($core->registerA == 0);
-        $core->FSubtract = $core->FHalfCarry = $core->FCarry = false;
+        $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FCarry = false;
     }

     /**
@@ @@
      * Opcode #0xAD.
      *
      * XOR L
-     *
-     * @param Core $core
      */
-    public static function opcode173(Core $core)
+    public static function opcode173(Core $core): void
     {
         $core->registerA ^= ($core->registersHL & 0xFF);
         $core->FZero = ($core->registerA == 0);
-        $core->FSubtract = $core->FHalfCarry = $core->FCarry = false;
+        $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FCarry = false;
     }

     /**
@@ @@
      * Opcode #0xAE.
      *
      * XOR (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode174(Core $core)
+    public static function opcode174(Core $core): void
     {
         $core->registerA ^= $core->memoryRead($core->registersHL);
         $core->FZero = ($core->registerA == 0);
-        $core->FSubtract = $core->FHalfCarry = $core->FCarry = false;
+        $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FCarry = false;
     }

     /**
@@ @@
      * Opcode #0xAF.
      *
      * XOR A
-     *
-     * @param Core $core
      */
-    public static function opcode175(Core $core)
+    public static function opcode175(Core $core): void
     {
         //number ^ same number == 0
         $core->registerA = 0;
         $core->FZero = true;
-        $core->FSubtract = $core->FHalfCarry = $core->FCarry = false;
+        $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FCarry = false;
     }

     /**
@@ @@
      * Opcode #0xB0.
      *
      * OR B
-     *
-     * @param Core $core
      */
-    public static function opcode176(Core $core)
+    public static function opcode176(Core $core): void
     {
         $core->registerA |= $core->registerB;
         $core->FZero = ($core->registerA == 0);
-        $core->FSubtract = $core->FCarry = $core->FHalfCarry = false;
+        $core->FSubtract = false;
+        $core->FCarry = false;
+        $core->FHalfCarry = false;
     }

     /**
@@ @@
      * Opcode #0xB1.
      *
      * OR C
-     *
-     * @param Core $core
      */
-    public static function opcode177(Core $core)
+    public static function opcode177(Core $core): void
     {
         $core->registerA |= $core->registerC;
         $core->FZero = ($core->registerA == 0);
-        $core->FSubtract = $core->FCarry = $core->FHalfCarry = false;
+        $core->FSubtract = false;
+        $core->FCarry = false;
+        $core->FHalfCarry = false;
     }

     /**
@@ @@
      * Opcode #0xB2.
      *
      * OR D
-     *
-     * @param Core $core
      */
-    public static function opcode178(Core $core)
+    public static function opcode178(Core $core): void
     {
         $core->registerA |= $core->registerD;
         $core->FZero = ($core->registerA == 0);
-        $core->FSubtract = $core->FCarry = $core->FHalfCarry = false;
+        $core->FSubtract = false;
+        $core->FCarry = false;
+        $core->FHalfCarry = false;
     }

     /**
@@ @@
      * Opcode #0xB3.
      *
      * OR E
-     *
-     * @param Core $core
      */
-    public static function opcode179(Core $core)
+    public static function opcode179(Core $core): void
     {
         $core->registerA |= $core->registerE;
         $core->FZero = ($core->registerA == 0);
-        $core->FSubtract = $core->FCarry = $core->FHalfCarry = false;
+        $core->FSubtract = false;
+        $core->FCarry = false;
+        $core->FHalfCarry = false;
     }

     /**
@@ @@
      * Opcode #0xB4.
      *
      * OR H
-     *
-     * @param Core $core
      */
-    public static function opcode180(Core $core)
+    public static function opcode180(Core $core): void
     {
         $core->registerA |= ($core->registersHL >> 8);
         $core->FZero = ($core->registerA == 0);
-        $core->FSubtract = $core->FCarry = $core->FHalfCarry = false;
+        $core->FSubtract = false;
+        $core->FCarry = false;
+        $core->FHalfCarry = false;
     }

     /**
@@ @@
      * Opcode #0xB5.
      *
      * OR L
-     *
-     * @param Core $core
      */
-    public static function opcode181(Core $core)
+    public static function opcode181(Core $core): void
     {
         $core->registerA |= ($core->registersHL & 0xFF);
         $core->FZero = ($core->registerA == 0);
-        $core->FSubtract = $core->FCarry = $core->FHalfCarry = false;
+        $core->FSubtract = false;
+        $core->FCarry = false;
+        $core->FHalfCarry = false;
     }

     /**
@@ @@
      * Opcode #0xB6.
      *
      * OR (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode182(Core $core)
+    public static function opcode182(Core $core): void
     {
         $core->registerA |= $core->memoryRead($core->registersHL);
         $core->FZero = ($core->registerA == 0);
-        $core->FSubtract = $core->FCarry = $core->FHalfCarry = false;
+        $core->FSubtract = false;
+        $core->FCarry = false;
+        $core->FHalfCarry = false;
     }

     /**
@@ @@
      * Opcode #0xB7.
      *
      * OR A
-     *
-     * @param Core $core
      */
-    public static function opcode183(Core $core)
+    public static function opcode183(Core $core): void
     {
         //number | same number == same number
         $core->FZero = ($core->registerA == 0);
-        $core->FSubtract = $core->FCarry = $core->FHalfCarry = false;
+        $core->FSubtract = false;
+        $core->FCarry = false;
+        $core->FHalfCarry = false;
     }

     /**
@@ @@
      * Opcode #0xB8.
      *
      * CP B
-     *
-     * @param Core $core
      */
-    public static function opcode184(Core $core)
+    public static function opcode184(Core $core): void
     {
         $dirtySum = $core->registerA - $core->registerB;
         $core->FHalfCarry = ($core->unsbtub($dirtySum) & 0xF) > ($core->registerA & 0xF);
@@ @@
      * Opcode #0xB9.
      *
      * CP C
-     *
-     * @param Core $core
      */
-    public static function opcode185(Core $core)
+    public static function opcode185(Core $core): void
     {
         $dirtySum = $core->registerA - $core->registerC;
         $core->FHalfCarry = ($core->unsbtub($dirtySum) & 0xF) > ($core->registerA & 0xF);
@@ @@
      * Opcode #0xBA.
      *
      * CP D
-     *
-     * @param Core $core
      */
-    public static function opcode186(Core $core)
+    public static function opcode186(Core $core): void
     {
         $dirtySum = $core->registerA - $core->registerD;
         $core->FHalfCarry = ($core->unsbtub($dirtySum) & 0xF) > ($core->registerA & 0xF);
@@ @@
      * Opcode #0xBB.
      *
      * CP E
-     *
-     * @param Core $core
      */
-    public static function opcode187(Core $core)
+    public static function opcode187(Core $core): void
     {
         $dirtySum = $core->registerA - $core->registerE;
         $core->FHalfCarry = ($core->unsbtub($dirtySum) & 0xF) > ($core->registerA & 0xF);
@@ @@
      * Opcode #0xBC.
      *
      * CP H
-     *
-     * @param Core $core
      */
-    public static function opcode188(Core $core)
+    public static function opcode188(Core $core): void
     {
         $dirtySum = $core->registerA - ($core->registersHL >> 8);
         $core->FHalfCarry = ($core->unsbtub($dirtySum) & 0xF) > ($core->registerA & 0xF);
@@ @@
      * Opcode #0xBD.
      *
      * CP L
-     *
-     * @param Core $core
      */
-    public static function opcode189(Core $core)
+    public static function opcode189(Core $core): void
     {
         $dirtySum = $core->registerA - ($core->registersHL & 0xFF);
         $core->FHalfCarry = ($core->unsbtub($dirtySum) & 0xF) > ($core->registerA & 0xF);
@@ @@
      * Opcode #0xBE.
      *
      * CP (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode190(Core $core)
+    public static function opcode190(Core $core): void
     {
         $dirtySum = $core->registerA - $core->memoryRead($core->registersHL);
         $core->FHalfCarry = ($core->unsbtub($dirtySum) & 0xF) > ($core->registerA & 0xF);
@@ @@
      * Opcode #0xBF.
      *
      * CP A
-     *
-     * @param Core $core
      */
-    public static function opcode191(Core $core)
+    public static function opcode191(Core $core): void
     {
-        $core->FHalfCarry = $core->FCarry = false;
-        $core->FZero = $core->FSubtract = true;
+        $core->FHalfCarry = false;
+        $core->FCarry = false;
+        $core->FZero = true;
+        $core->FSubtract = true;
     }

     /**
@@ @@
      * Opcode #0xC0.
      *
      * RET !FZ
-     *
-     * @param Core $core
      */
-    public static function opcode192(Core $core)
+    public static function opcode192(Core $core): void
     {
         if (!$core->FZero) {
             $core->programCounter = ($core->memoryRead(($core->stackPointer + 1) & 0xFFFF) << 8) + $core->memoryRead($core->stackPointer);
@@ @@
      * Opcode #0xC1.
      *
      * POP BC
-     *
-     * @param Core $core
      */
-    public static function opcode193(Core $core)
+    public static function opcode193(Core $core): void
     {
         $core->registerC = $core->memoryRead($core->stackPointer);
         $core->registerB = $core->memoryRead(($core->stackPointer + 1) & 0xFFFF);
@@ @@
      * Opcode #0xC2.
      *
      * JP !FZ, nn
-     *
-     * @param Core $core
      */
-    public static function opcode194(Core $core)
+    public static function opcode194(Core $core): void
     {
         if (!$core->FZero) {
             $core->programCounter = ($core->memoryRead(($core->programCounter + 1) & 0xFFFF) << 8) + $core->memoryRead($core->programCounter);
@@ @@
      * Opcode #0xC3.
      *
      * JP nn
-     *
-     * @param Core $core
      */
-    public static function opcode195(Core $core)
+    public static function opcode195(Core $core): void
     {
         $core->programCounter = ($core->memoryRead(($core->programCounter + 1) & 0xFFFF) << 8) + $core->memoryRead($core->programCounter);
     }
@@ @@
      * Opcode #0xC4.
      *
      * CALL !FZ, nn
-     *
-     * @param Core $core
      */
-    public static function opcode196(Core $core)
+    public static function opcode196(Core $core): void
     {
         if (!$core->FZero) {
             $temp_pc = ($core->memoryRead(($core->programCounter + 1) & 0xFFFF) << 8) + $core->memoryRead($core->programCounter);
@@ @@
      * Opcode #0xC5.
      *
      * PUSH BC
-     *
-     * @param Core $core
      */
-    public static function opcode197(Core $core)
+    public static function opcode197(Core $core): void
     {
         $core->stackPointer = $core->unswtuw($core->stackPointer - 1);
         $core->memoryWrite($core->stackPointer, $core->registerB);
@@ @@
      * Opcode #0xC6.
      *
      * ADD, n
-     *
-     * @param Core $core
      */
-    public static function opcode198(Core $core)
+    public static function opcode198(Core $core): void
     {
         $dirtySum = $core->registerA + $core->memoryRead($core->programCounter);
         $core->FHalfCarry = ($dirtySum & 0xF) < ($core->registerA & 0xF);
@@ @@
      * Opcode #0xC7.
      *
      * RST 0
-     *
-     * @param Core $core
      */
-    public static function opcode199(Core $core)
+    public static function opcode199(Core $core): void
     {
         $core->stackPointer = $core->unswtuw($core->stackPointer - 1);
         $core->memoryWrite($core->stackPointer, $core->programCounter >> 8);
@@ @@
      * Opcode #0xC8.
      *
      * RET FZ
-     *
-     * @param Core $core
      */
-    public static function opcode200(Core $core)
+    public static function opcode200(Core $core): void
     {
         if ($core->FZero) {
             $core->programCounter = ($core->memoryRead(($core->stackPointer + 1) & 0xFFFF) << 8) + $core->memoryRead($core->stackPointer);
@@ @@
      * Opcode #0xC9.
      *
      * RET
-     *
-     * @param Core $core
      */
-    public static function opcode201(Core $core)
+    public static function opcode201(Core $core): void
     {
         $core->programCounter = ($core->memoryRead(($core->stackPointer + 1) & 0xFFFF) << 8) + $core->memoryRead($core->stackPointer);
         $core->stackPointer = ($core->stackPointer + 2) & 0xFFFF;
@@ @@
      * Opcode #0xCA.
      *
      * JP FZ, nn
-     *
-     * @param Core $core
      */
-    public static function opcode202(Core $core)
+    public static function opcode202(Core $core): void
     {
         if ($core->FZero) {
             $core->programCounter = ($core->memoryRead(($core->programCounter + 1) & 0xFFFF) << 8) + $core->memoryRead($core->programCounter);
@@ @@
      * Opcode #0xCB.
      *
      * Secondary OP Code Set:
-     *
-     * @param Core $core
      */
-    public static function opcode203(Core $core)
+    public static function opcode203(Core $core): void
     {
         $opcode = $core->memoryRead($core->programCounter);
         //Increment the program counter to the next instruction:
@@ @@
      * Opcode #0xCC.
      *
      * CALL FZ, nn
-     *
-     * @param Core $core
      */
-    public static function opcode204(Core $core)
+    public static function opcode204(Core $core): void
     {
         if ($core->FZero) {
             $temp_pc = ($core->memoryRead(($core->programCounter + 1) & 0xFFFF) << 8) + $core->memoryRead($core->programCounter);
@@ @@
      * Opcode #0xCD.
      *
      * CALL nn
-     *
-     * @param Core $core
      */
-    public static function opcode205(Core $core)
+    public static function opcode205(Core $core): void
     {
         $temp_pc = ($core->memoryRead(($core->programCounter + 1) & 0xFFFF) << 8) + $core->memoryRead($core->programCounter);
         $core->programCounter = ($core->programCounter + 2) & 0xFFFF;
@@ @@
      * Opcode #0xCE.
      *
      * ADC A, n
-     *
-     * @param Core $core
      */
-    public static function opcode206(Core $core)
+    public static function opcode206(Core $core): void
     {
         $tempValue = $core->memoryRead($core->programCounter);
         $dirtySum = $core->registerA + $tempValue + (($core->FCarry) ? 1 : 0);
@@ @@
      * Opcode #0xCF.
      *
      * RST 0x8
-     *
-     * @param Core $core
      */
-    public static function opcode207(Core $core)
+    public static function opcode207(Core $core): void
     {
         $core->stackPointer = $core->unswtuw($core->stackPointer - 1);
         $core->memoryWrite($core->stackPointer, $core->programCounter >> 8);
@@ @@
      * Opcode #0xD0.
      *
      * RET !FC
-     *
-     * @param Core $core
      */
-    public static function opcode208(Core $core)
+    public static function opcode208(Core $core): void
     {
         if (!$core->FCarry) {
             $core->programCounter = ($core->memoryRead(($core->stackPointer + 1) & 0xFFFF) << 8) + $core->memoryRead($core->stackPointer);
@@ @@
      * Opcode #0xD1.
      *
      * POP DE
-     *
-     * @param Core $core
      */
-    public static function opcode209(Core $core)
+    public static function opcode209(Core $core): void
     {
         $core->registerE = $core->memoryRead($core->stackPointer);
         $core->registerD = $core->memoryRead(($core->stackPointer + 1) & 0xFFFF);
@@ @@
      * Opcode #0xD2.
      *
      * JP !FC, nn
-     *
-     * @param Core $core
      */
-    public static function opcode210(Core $core)
+    public static function opcode210(Core $core): void
     {
         if (!$core->FCarry) {
             $core->programCounter = ($core->memoryRead(($core->programCounter + 1) & 0xFFFF) << 8) + $core->memoryRead($core->programCounter);
@@ @@
      * Opcode #0xD3.
      *
      * 0xD3 - Illegal
-     *
-     * @param Core $core
      */
-    public static function opcode211(Core $core)
+    public static function opcode211(Core $core): void
     {
         // @TODO
         // cout("Illegal op code 0xD3 called, pausing emulation.", 2);
@@ @@
      * Opcode #0xD4.
      *
      * CALL !FC, nn
-     *
-     * @param Core $core
      */
-    public static function opcode212(Core $core)
+    public static function opcode212(Core $core): void
     {
         if (!$core->FCarry) {
             $temp_pc = ($core->memoryRead(($core->programCounter + 1) & 0xFFFF) << 8) + $core->memoryRead($core->programCounter);
@@ @@
      * Opcode #0xD5.
      *
      * PUSH DE
-     *
-     * @param Core $core
      */
-    public static function opcode213(Core $core)
+    public static function opcode213(Core $core): void
     {
         $core->stackPointer = $core->unswtuw($core->stackPointer - 1);
         $core->memoryWrite($core->stackPointer, $core->registerD);
@@ @@
      * Opcode #0xD6.
      *
      * SUB A, n
-     *
-     * @param Core $core
      */
-    public static function opcode214(Core $core)
+    public static function opcode214(Core $core): void
     {
         $temp_var = $core->memoryRead($core->programCounter);
         $dirtySum = $core->registerA - $temp_var;
@@ @@
      * Opcode #0xD7.
      *
      * RST 0x10
-     *
-     * @param Core $core
      */
-    public static function opcode215(Core $core)
+    public static function opcode215(Core $core): void
     {
         $core->stackPointer = $core->unswtuw($core->stackPointer - 1);
         $core->memoryWrite($core->stackPointer, $core->programCounter >> 8);
@@ @@
      * Opcode #0xD8.
      *
      * RET FC
-     *
-     * @param Core $core
      */
-    public static function opcode216(Core $core)
+    public static function opcode216(Core $core): void
     {
         if ($core->FCarry) {
             $core->programCounter = ($core->memoryRead(($core->stackPointer + 1) & 0xFFFF) << 8) + $core->memoryRead($core->stackPointer);
@@ @@
      * Opcode #0xD9.
      *
      * RETI
-     *
-     * @param Core $core
      */
-    public static function opcode217(Core $core)
+    public static function opcode217(Core $core): void
     {
         $core->programCounter = ($core->memoryRead(($core->stackPointer + 1) & 0xFFFF) << 8) + $core->memoryRead($core->stackPointer);
         $core->stackPointer = ($core->stackPointer + 2) & 0xFFFF;
@@ @@
      * Opcode #0xDA.
      *
      * JP FC, nn
-     *
-     * @param Core $core
      */
-    public static function opcode218(Core $core)
+    public static function opcode218(Core $core): void
     {
         if ($core->FCarry) {
             $core->programCounter = ($core->memoryRead(($core->programCounter + 1) & 0xFFFF) << 8) + $core->memoryRead($core->programCounter);
@@ @@
      * Opcode #0xDB.
      *
      * 0xDB - Illegal
-     *
-     * @param Core $core
      */
-    public static function opcode219(Core $core)
+    public static function opcode219(Core $core): never
     {
         echo 'Illegal op code 0xDB called, pausing emulation.';
         exit();
@@ @@
      * Opcode #0xDC.
      *
      * CALL FC, nn
-     *
-     * @param Core $core
      */
-    public static function opcode220(Core $core)
+    public static function opcode220(Core $core): void
     {
         if ($core->FCarry) {
             $temp_pc = ($core->memoryRead(($core->programCounter + 1) & 0xFFFF) << 8) + $core->memoryRead($core->programCounter);
@@ @@
      * Opcode #0xDD.
      *
      * 0xDD - Illegal
-     *
-     * @param Core $core
      */
-    public static function opcode221(Core $core)
+    public static function opcode221(Core $core): never
     {
         echo 'Illegal op code 0xDD called, pausing emulation.';
         exit();
@@ @@
      * Opcode #0xDE.
      *
      * SBC A, n
-     *
-     * @param Core $core
      */
-    public static function opcode222(Core $core)
+    public static function opcode222(Core $core): void
     {
         $temp_var = $core->memoryRead($core->programCounter);
         $dirtySum = $core->registerA - $temp_var - (($core->FCarry) ? 1 : 0);
@@ @@
      * Opcode #0xDF.
      *
      * RST 0x18
-     *
-     * @param Core $core
      */
-    public static function opcode223(Core $core)
+    public static function opcode223(Core $core): void
     {
         $core->stackPointer = $core->unswtuw($core->stackPointer - 1);
         $core->memoryWrite($core->stackPointer, $core->programCounter >> 8);
@@ @@
      * Opcode #0xE0.
      *
      * LDH (n), A
-     *
-     * @param Core $core
      */
-    public static function opcode224(Core $core)
+    public static function opcode224(Core $core): void
     {
         $core->memoryWrite(0xFF00 + $core->memoryRead($core->programCounter), $core->registerA);
         $core->programCounter = ($core->programCounter + 1) & 0xFFFF;
@@ @@
      * Opcode #0xE1.
      *
      * POP HL
-     *
-     * @param Core $core
      */
-    public static function opcode225(Core $core)
+    public static function opcode225(Core $core): void
     {
         $core->registersHL = ($core->memoryRead(($core->stackPointer + 1) & 0xFFFF) << 8) + $core->memoryRead($core->stackPointer);
         $core->stackPointer = ($core->stackPointer + 2) & 0xFFFF;
@@ @@
      * Opcode #0xE2.
      *
      * LD (C), A
-     *
-     * @param Core $core
      */
-    public static function opcode226(Core $core)
+    public static function opcode226(Core $core): void
     {
         $core->memoryWrite(0xFF00 + $core->registerC, $core->registerA);
     }
@@ @@
      * Opcode #0xE3.
      *
      * 0xE3 - Illegal
-     *
-     * @param Core $core
      */
-    public static function opcode227(Core $core)
+    public static function opcode227(Core $core): never
     {
         echo 'Illegal op code 0xE3 called, pausing emulation.';
         exit();
@@ @@
      * Opcode #0xE4.
      *
      * 0xE4 - Illegal
-     *
-     * @param Core $core
      */
-    public static function opcode228(Core $core)
+    public static function opcode228(Core $core): never
     {
         echo 'Illegal op code 0xE4 called, pausing emulation.';
         exit();
@@ @@
      * Opcode #0xE5.
      *
      * PUSH HL
-     *
-     * @param Core $core
      */
-    public static function opcode229(Core $core)
+    public static function opcode229(Core $core): void
     {
         $core->stackPointer = $core->unswtuw($core->stackPointer - 1);
         $core->memoryWrite($core->stackPointer, $core->registersHL >> 8);
@@ @@
      * Opcode #0xE6.
      *
      * AND n
-     *
-     * @param Core $core
      */
-    public static function opcode230(Core $core)
+    public static function opcode230(Core $core): void
     {
         $core->registerA &= $core->memoryRead($core->programCounter);
         $core->programCounter = ($core->programCounter + 1) & 0xFFFF;
         $core->FZero = ($core->registerA == 0);
         $core->FHalfCarry = true;
-        $core->FSubtract = $core->FCarry = false;
+        $core->FSubtract = false;
+        $core->FCarry = false;
     }

     /**
@@ @@
      * Opcode #0xE7.
      *
      * RST 0x20
-     *
-     * @param Core $core
      */
-    public static function opcode231(Core $core)
+    public static function opcode231(Core $core): void
     {
         $core->stackPointer = $core->unswtuw($core->stackPointer - 1);
         $core->memoryWrite($core->stackPointer, $core->programCounter >> 8);
@@ @@
      * Opcode #0xE8.
      *
      * ADD SP, n
-     *
-     * @param Core $core
      */
-    public static function opcode232(Core $core)
+    public static function opcode232(Core $core): void
     {
         $signedByte = $core->usbtsb($core->memoryRead($core->programCounter));
         $temp_value = $core->nswtuw($core->stackPointer + $signedByte);
@@ @@
         $core->FHalfCarry = ((($core->stackPointer ^ $signedByte ^ $temp_value) & 0x10) == 0x10);
         $core->stackPointer = $temp_value;
         $core->programCounter = ($core->programCounter + 1) & 0xFFFF;
-        $core->FZero = $core->FSubtract = false;
+        $core->FZero = false;
+        $core->FSubtract = false;
     }

     /**
@@ @@
      * Opcode #0xE9.
      *
      * JP, (HL)
-     *
-     * @param Core $core
      */
-    public static function opcode233(Core $core)
+    public static function opcode233(Core $core): void
     {
         $core->programCounter = $core->registersHL;
     }
@@ @@
      * Opcode #0xEA.
      *
      * LD n, A
-     *
-     * @param Core $core
      */
-    public static function opcode234(Core $core)
+    public static function opcode234(Core $core): void
     {
         $core->memoryWrite(($core->memoryRead(($core->programCounter + 1) & 0xFFFF) << 8) + $core->memoryRead($core->programCounter), $core->registerA);
         $core->programCounter = ($core->programCounter + 2) & 0xFFFF;
@@ @@
      * Opcode #0xEB.
      *
      * 0xEB - Illegal
-     *
-     * @param Core $core
      */
-    public static function opcode235(Core $core)
+    public static function opcode235(Core $core): never
     {
         echo 'Illegal op code 0xEB called, pausing emulation.';
         exit();
@@ @@
      * Opcode #0xEC.
      *
      * 0xEC - Illegal
-     *
-     * @param Core $core
      */
-    public static function opcode236(Core $core)
+    public static function opcode236(Core $core): never
     {
         echo 'Illegal op code 0xEC called, pausing emulation.';
         exit();
@@ @@
      * Opcode #0xED.
      *
      * 0xED - Illegal
-     *
-     * @param Core $core
      */
-    public static function opcode237(Core $core)
+    public static function opcode237(Core $core): never
     {
         echo 'Illegal op code 0xED called, pausing emulation.';
         exit();
@@ @@
      * Opcode #0xEE.
      *
      * XOR n
-     *
-     * @param Core $core
      */
-    public static function opcode238(Core $core)
+    public static function opcode238(Core $core): void
     {
         $core->registerA ^= $core->memoryRead($core->programCounter);
         $core->FZero = ($core->registerA == 0);
         $core->programCounter = ($core->programCounter + 1) & 0xFFFF;
-        $core->FSubtract = $core->FHalfCarry = $core->FCarry = false;
+        $core->FSubtract = false;
+        $core->FHalfCarry = false;
+        $core->FCarry = false;
     }

     /**
@@ @@
      * Opcode #0xEF.
      *
      * RST 0x28
-     *
-     * @param Core $core
      */
-    public static function opcode239(Core $core)
+    public static function opcode239(Core $core): void
     {
         $core->stackPointer = $core->unswtuw($core->stackPointer - 1);
         $core->memoryWrite($core->stackPointer, $core->programCounter >> 8);
@@ @@
      * Opcode #0xF0.
      *
      * LDH A, (n)
-     *
-     * @param Core $core
      */
-    public static function opcode240(Core $core)
+    public static function opcode240(Core $core): void
     {
         $core->registerA = $core->memoryRead(0xFF00 + $core->memoryRead($core->programCounter));
         $core->programCounter = ($core->programCounter + 1) & 0xFFFF;
@@ @@
      * Opcode #0xF1.
      *
      * POP AF
-     *
-     * @param Core $core
      */
-    public static function opcode241(Core $core)
+    public static function opcode241(Core $core): void
     {
         $temp_var = $core->memoryRead($core->stackPointer);
         $core->FZero = (($temp_var & 0x80) == 0x80);
@@ @@
      * Opcode #0xF2.
      *
      * LD A, (C)
-     *
-     * @param Core $core
      */
-    public static function opcode242(Core $core)
+    public static function opcode242(Core $core): void
     {
         $core->registerA = $core->memoryRead(0xFF00 + $core->registerC);
     }
@@ @@
      * Opcode #0xF3.
      *
      * DI
-     *
-     * @param Core $core
      */
-    public static function opcode243(Core $core)
+    public static function opcode243(Core $core): void
     {
         $core->IME = false;
         $core->untilEnable = 0;
@@ @@
      * Opcode #0xF4.
      *
      * 0xF4 - Illegal
-     *
-     * @param Core $core
      */
-    public static function opcode244(Core $core)
+    public static function opcode244(Core $core): void
     {
         // @TODO
         // cout("Illegal op code 0xF4 called, pausing emulation.", 2);
@@ @@
      * Opcode #0xF5.
      *
      * PUSH AF
-     *
-     * @param Core $core
      */
-    public static function opcode245(Core $core)
+    public static function opcode245(Core $core): void
     {
         $core->stackPointer = $core->unswtuw($core->stackPointer - 1);
         $core->memoryWrite($core->stackPointer, $core->registerA);
@@ @@
      * Opcode #0xF6.
      *
      * OR n
-     *
-     * @param Core $core
      */
-    public static function opcode246(Core $core)
+    public static function opcode246(Core $core): void
     {
         $core->registerA |= $core->memoryRead($core->programCounter);
         $core->FZero = ($core->registerA == 0);
         $core->programCounter = ($core->programCounter + 1) & 0xFFFF;
-        $core->FSubtract = $core->FCarry = $core->FHalfCarry = false;
+        $core->FSubtract = false;
+        $core->FCarry = false;
+        $core->FHalfCarry = false;
     }

     /**
@@ @@
      * Opcode #0xF7.
      *
      * RST 0x30
-     *
-     * @param Core $core
      */
-    public static function opcode247(Core $core)
+    public static function opcode247(Core $core): void
     {
         $core->stackPointer = $core->unswtuw($core->stackPointer - 1);
         $core->memoryWrite($core->stackPointer, $core->programCounter >> 8);
@@ @@
      * Opcode #0xF8.
      *
      * LDHL SP, n
-     *
-     * @param Core $core
      */
-    public static function opcode248(Core $core)
+    public static function opcode248(Core $core): void
     {
         $signedByte = $core->usbtsb($core->memoryRead($core->programCounter));
         $core->registersHL = $core->nswtuw($core->stackPointer + $signedByte);
@@ @@
         $core->FCarry = ((($core->stackPointer ^ $signedByte ^ $core->registersHL) & 0x100) == 0x100);
         $core->FHalfCarry = ((($core->stackPointer ^ $signedByte ^ $core->registersHL) & 0x10) == 0x10);
         $core->programCounter = ($core->programCounter + 1) & 0xFFFF;
-        $core->FZero = $core->FSubtract = false;
+        $core->FZero = false;
+        $core->FSubtract = false;
     }

     /**
@@ @@
      * Opcode #0xF9.
      *
      * LD SP, HL
-     *
-     * @param Core $core
      */
-    public static function opcode249(Core $core)
+    public static function opcode249(Core $core): void
     {
         $core->stackPointer = $core->registersHL;
     }
@@ @@
      * Opcode #0xFA.
      *
      * LD A, (nn)
-     *
-     * @param Core $core
      */
-    public static function opcode250(Core $core)
+    public static function opcode250(Core $core): void
     {
         $core->registerA = $core->memoryRead(($core->memoryRead(($core->programCounter + 1) & 0xFFFF) << 8) + $core->memoryRead($core->programCounter));
         $core->programCounter = ($core->programCounter + 2) & 0xFFFF;
@@ @@
      * Opcode #0xFB.
      *
      * EI
-     *
-     * @param Core $core
      */
-    public static function opcode251(Core $core)
+    public static function opcode251(Core $core): void
     {
         $core->untilEnable = 2;
     }
@@ @@
      * Opcode #0xFC.
      *
      * 0xFC - Illegal
-     *
-     * @param Core $core
      */
-    public static function opcode252(Core $core)
+    public static function opcode252(Core $core): never
     {
         echo 'Illegal op code 0xFC called, pausing emulation.';
         exit();
@@ @@
      * Opcode #0xFD.
      *
      * 0xFD - Illegal
-     *
-     * @param Core $core
      */
-    public static function opcode253(Core $core)
+    public static function opcode253(Core $core): never
     {
         echo 'Illegal op code 0xFD called, pausing emulation.';
         exit();
@@ @@
      * Opcode #0xFE.
      *
      * CP n
-     *
-     * @param Core $core
      */
-    public static function opcode254(Core $core)
+    public static function opcode254(Core $core): void
     {
         $dirtySum = $core->registerA - $core->memoryRead($core->programCounter);
         $core->FHalfCarry = ($core->unsbtub($dirtySum) & 0xF) > ($core->registerA & 0xF);
@@ @@
      * Opcode #0xFF.
      *
      * RST 0x38
-     *
-     * @param Core $core
      */
-    public static function opcode255(Core $core)
+    public static function opcode255(Core $core): void
     {
         $core->stackPointer = $core->unswtuw($core->stackPointer - 1);
         $core->memoryWrite($core->stackPointer, $core->programCounter >> 8);
    ----------- end diff -----------

Applied rules:
 * CombineIfRector
 * CompleteMissingIfElseBracketRector
 * SplitDoubleAssignRector
 * NewlineBeforeNewAssignSetRector
 * NewlineAfterStatementRector
 * RemoveUselessParamTagRector
 * AddVoidReturnTypeWhereNoReturnRector
 * ReturnNeverTypeRector


 [OK] 6 files would have been changed (dry-run) by Rector                                                               

